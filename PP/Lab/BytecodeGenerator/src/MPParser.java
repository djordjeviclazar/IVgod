//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Jan 26 10:56:38 CET 2021
//----------------------------------------------------

import AST.*;
import SymbolTable.Constant;
import SymbolTable.SymbolTable;
import SymbolTable.Type;
import SymbolTable.Variable;

/**
 * CUP v0.10k generated parser.
 *
 * @version Tue Jan 26 10:56:38 CET 2021
 */
public class MPParser extends java_cup.runtime.lr_parser
{

    /**
     * Default constructor.
     */
    public MPParser()
    {
        super();
    }

    /**
     * Constructor which sets the default scanner.
     */
    public MPParser(java_cup.runtime.Scanner s)
    {
        super(s);
    }

    /**
     * Production table.
     */
    protected static final short _production_table[][] =
            unpackFromStrings(new String[]{
                    "\000\051\000\002\020\005\000\002\002\004\000\002\021" +
                            "\005\000\002\003\003\000\002\004\005\000\002\004\003" +
                            "\000\002\005\006\000\002\025\003\000\002\025\003\000" +
                            "\002\025\003\000\002\022\005\000\002\022\003\000\002" +
                            "\023\003\000\002\023\003\000\002\031\016\000\002\030" +
                            "\005\000\002\030\003\000\002\027\003\000\002\027\003" +
                            "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
                            "\002\024\005\000\002\006\006\000\002\007\005\000\002" +
                            "\007\003\000\002\010\007\000\002\011\004\000\002\012" +
                            "\003\000\002\013\005\000\002\013\003\000\002\014\011" +
                            "\000\002\015\004\000\002\016\003\000\002\017\004\000" +
                            "\002\026\005\000\002\026\005\000\002\026\003\000\002" +
                            "\033\003\000\002\033\003\000\002\033\003"});

    /**
     * Access to production table.
     */
    public short[][] production_table()
    {
        return _production_table;
    }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table =
            unpackFromStrings(new String[]{
                    "\000\126\000\004\004\004\001\002\000\004\013\007\001" +
                            "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
                            "\000\004\040\123\001\002\000\010\006\ufffe\013\ufffe\041" +
                            "\121\001\002\000\010\006\ufffc\013\ufffc\041\ufffc\001\002" +
                            "\000\006\006\020\013\015\001\002\000\004\005\014\001" +
                            "\002\000\004\002\001\001\002\000\004\030\112\001\002" +
                            "\000\010\014\ufff6\036\ufff6\041\ufff6\001\002\000\006\014" +
                            "\053\041\037\001\002\000\004\033\023\001\002\000\010" +
                            "\014\ufff5\036\ufff5\041\ufff5\001\002\000\010\014\ufff4\036" +
                            "\ufff4\041\ufff4\001\002\000\012\013\024\042\027\043\032" +
                            "\044\030\001\002\000\030\014\ufff0\017\ufff0\025\ufff0\026" +
                            "\ufff0\027\ufff0\031\ufff0\032\ufff0\034\ufff0\036\ufff0\037\ufff0" +
                            "\041\ufff0\001\002\000\030\014\uffef\017\uffef\025\uffef\026" +
                            "\uffef\027\uffef\031\uffef\032\uffef\034\uffef\036\uffef\037\uffef" +
                            "\041\uffef\001\002\000\012\025\051\026\050\027\047\034" +
                            "\ufff1\001\002\000\030\014\uffdb\017\uffdb\025\uffdb\026\uffdb" +
                            "\027\uffdb\031\uffdb\032\uffdb\034\uffdb\036\uffdb\037\uffdb\041" +
                            "\uffdb\001\002\000\030\014\uffd9\017\uffd9\025\uffd9\026\uffd9" +
                            "\027\uffd9\031\uffd9\032\uffd9\034\uffd9\036\uffd9\037\uffd9\041" +
                            "\uffd9\001\002\000\004\034\033\001\002\000\030\014\uffda" +
                            "\017\uffda\025\uffda\026\uffda\027\uffda\031\uffda\032\uffda\034" +
                            "\uffda\036\uffda\037\uffda\041\uffda\001\002\000\004\040\034" +
                            "\001\002\000\004\035\035\001\002\000\006\006\020\013" +
                            "\015\001\002\000\006\036\040\041\037\001\002\000\006" +
                            "\006\020\013\015\001\002\000\004\007\041\001\002\000" +
                            "\004\035\042\001\002\000\006\006\020\013\015\001\002" +
                            "\000\004\036\044\001\002\000\010\014\ufff3\036\ufff3\041" +
                            "\ufff3\001\002\000\010\014\ufff7\036\ufff7\041\ufff7\001\002" +
                            "\000\012\013\024\042\027\043\032\044\030\001\002\000" +
                            "\012\013\uffec\042\uffec\043\uffec\044\uffec\001\002\000\012" +
                            "\013\uffed\042\uffed\043\uffed\044\uffed\001\002\000\012\013" +
                            "\uffee\042\uffee\043\uffee\044\uffee\001\002\000\004\034\ufff2" +
                            "\001\002\000\004\021\056\001\002\000\004\005\uffff\001" +
                            "\002\000\006\016\075\041\073\001\002\000\004\023\061" +
                            "\001\002\000\006\016\uffe3\041\uffe3\001\002\000\004\037" +
                            "\063\001\002\000\004\013\062\001\002\000\004\037\uffe1" +
                            "\001\002\000\012\013\024\042\027\043\032\044\030\001" +
                            "\002\000\004\037\uffe0\001\002\000\004\037\066\001\002" +
                            "\000\004\024\070\001\002\000\004\022\072\001\002\000" +
                            "\004\013\071\001\002\000\004\022\uffdf\001\002\000\006" +
                            "\016\uffe2\041\uffe2\001\002\000\004\021\056\001\002\000" +
                            "\006\015\uffe8\041\uffe8\001\002\000\004\020\103\001\002" +
                            "\000\006\015\100\041\077\001\002\000\004\016\075\001" +
                            "\002\000\004\005\uffea\001\002\000\006\015\uffe9\041\uffe9" +
                            "\001\002\000\004\037\105\001\002\000\004\013\104\001" +
                            "\002\000\004\037\uffe6\001\002\000\012\013\024\042\027" +
                            "\043\032\044\030\001\002\000\004\017\uffe5\001\002\000" +
                            "\004\017\110\001\002\000\006\015\uffe7\041\uffe7\001\002" +
                            "\000\006\016\uffe4\041\uffe4\001\002\000\012\013\024\042" +
                            "\027\043\032\044\030\001\002\000\014\014\uffdc\031\uffdc" +
                            "\032\uffdc\036\uffdc\041\uffdc\001\002\000\014\014\uffeb\031" +
                            "\115\032\116\036\uffeb\041\uffeb\001\002\000\012\013\024" +
                            "\042\027\043\032\044\030\001\002\000\012\013\024\042" +
                            "\027\043\032\044\030\001\002\000\014\014\uffdd\031\uffdd" +
                            "\032\uffdd\036\uffdd\041\uffdd\001\002\000\014\014\uffde\031" +
                            "\uffde\032\uffde\036\uffde\041\uffde\001\002\000\004\013\007" +
                            "\001\002\000\010\006\ufffd\013\ufffd\041\ufffd\001\002\000" +
                            "\010\010\124\011\126\012\125\001\002\000\004\041\ufffa" +
                            "\001\002\000\004\041\ufff8\001\002\000\004\041\ufff9\001" +
                            "\002\000\004\041\130\001\002\000\010\006\ufffb\013\ufffb" +
                            "\041\ufffb\001\002"});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table()
    {
        return _action_table;
    }

    /**
     * <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table =
            unpackFromStrings(new String[]{
                    "\000\126\000\004\020\004\001\001\000\012\003\011\004" +
                            "\007\005\010\021\012\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\012\022\016\023\015\024\020\031\021\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\004\006\053\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\010\027\025\030" +
                            "\030\033\024\001\001\000\002\001\001\000\002\001\001" +
                            "\000\004\032\045\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\012\022\035\023\015\024\020\031" +
                            "\021\001\001\000\002\001\001\000\010\023\044\024\020" +
                            "\031\021\001\001\000\002\001\001\000\002\001\001\000" +
                            "\010\023\042\024\020\031\021\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\006\027\051\033" +
                            "\024\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\006\013\054\014\056\001" +
                            "\001\000\002\001\001\000\006\007\075\010\073\001\001" +
                            "\000\004\015\057\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\010\016\064" +
                            "\027\063\033\024\001\001\000\002\001\001\000\002\001" +
                            "\001\000\004\017\066\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
                            "\110\001\001\000\002\001\001\000\004\011\101\001\001" +
                            "\000\002\001\001\000\004\010\100\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\010\012\106\027\105\033\024\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\010\026\113\027\112\033\024\001" +
                            "\001\000\002\001\001\000\002\001\001\000\006\027\117" +
                            "\033\024\001\001\000\006\027\116\033\024\001\001\000" +
                            "\002\001\001\000\002\001\001\000\004\005\121\001\001" +
                            "\000\002\001\001\000\004\025\126\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001"});

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table()
    {
        return _reduce_table;
    }

    /**
     * Instance of action encapsulation class.
     */
    protected CUP$MPParser$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions()
    {
        action_obj = new CUP$MPParser$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception
    {
        /* call code in generated class */
        return action_obj.CUP$MPParser$do_action(act_num, parser, stack, top);
    }

    /**
     * Indicates start state.
     */
    public int start_state()
    {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production()
    {
        return 1;
    }

    /**
     * <code>EOF</code> Symbol index.
     */
    public int EOF_sym()
    {
        return 0;
    }

    /**
     * <code>error</code> Symbol index.
     */
    public int error_sym()
    {
        return 1;
    }


    /**
     * User initialization code.
     */
    public void user_init() throws java.lang.Exception
    {

        symbolTable = new SymbolTable();

    }


    SymbolTable symbolTable;

}

/**
 * Cup generated class to encapsulate user supplied action code.
 */
class CUP$MPParser$actions
{
    private final MPParser parser;

    /**
     * Constructor
     */
    CUP$MPParser$actions(MPParser parser)
    {
        this.parser = parser;
    }

    /**
     * Method with the actual generated action code.
     */
    public final java_cup.runtime.Symbol CUP$MPParser$do_action(
            int CUP$MPParser$act_num,
            java_cup.runtime.lr_parser CUP$MPParser$parser,
            java.util.Stack CUP$MPParser$stack,
            int CUP$MPParser$top)
            throws java.lang.Exception
    {
        /* Symbol object for return from actions */
        java_cup.runtime.Symbol CUP$MPParser$result;

        /* select the action based on the action number */
        switch (CUP$MPParser$act_num)
        {
            /*. . . . . . . . . . . . . . . . . . . .*/
            case 40: // CONST ::= CONSTDOUBLE 
            {
                Constant RESULT = null;
                int cleft = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left;
                int cright = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right;
                Double c = (Double) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).value;

                System.out.println("Prepoznata je Double konstanta");
                RESULT = new Constant(parser.symbolTable.getType("double"), c);
                //RESULT = Type.DOUBLE;

                CUP$MPParser$result = new java_cup.runtime.Symbol(25/*CONST*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 39: // CONST ::= CONSTINTEGER 
            {
                Constant RESULT = null;
                int cleft = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left;
                int cright = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right;
                Integer c = (Integer) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).value;

                System.out.println("Prepoznata je Integer konstanta");
                RESULT = new Constant(parser.symbolTable.getType("integer"), c);
                //RESULT = Type.INTEGER;

                CUP$MPParser$result = new java_cup.runtime.Symbol(25/*CONST*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 38: // CONST ::= CONSTSTRING 
            {
                Constant RESULT = null;
                int cleft = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left;
                int cright = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right;
                String c = (String) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).value;

                System.out.println("Prepoznata je String konstanta");
                RESULT = new Constant(parser.symbolTable.getType("string"), c);
                //RESULT = Type.STRING;

                CUP$MPParser$result = new java_cup.runtime.Symbol(25/*CONST*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 37: // Expr ::= Term 
            {
                Expression RESULT = null;
                int tleft = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left;
                int tright = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right;
                Expression t = (Expression) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).value;

                System.out.println("Prepoznat izraz");
                RESULT = t;

                CUP$MPParser$result = new java_cup.runtime.Symbol(20/*Expr*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 36: // Expr ::= Expr MUL Term 
            {
                Expression RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 2)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 2)).right;
                Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 2)).value;
                int tleft = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left;
                int tright = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right;
                Expression t = (Expression) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).value;

                System.out.println("Prepoznato množenje");
                RESULT = new Product(e, t);

                CUP$MPParser$result = new java_cup.runtime.Symbol(20/*Expr*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 2)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 35: // Expr ::= Expr PLUS Term 
            {
                Expression RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 2)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 2)).right;
                Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 2)).value;
                int tleft = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left;
                int tright = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right;
                Expression t = (Expression) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).value;

                System.out.println("Prepoznato sabiranje");
                RESULT = new Sum(e, t);


                CUP$MPParser$result = new java_cup.runtime.Symbol(20/*Expr*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 2)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 34: // Mapping ::= EXECUTEDON ID 
            {
                Object RESULT = null;

                System.out.println("Prepoznato mapiranje");

                CUP$MPParser$result = new java_cup.runtime.Symbol(13/*Mapping*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 1)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 33: // Demand ::= Term 
            {
                Object RESULT = null;

                System.out.println("Prepoznat zahtev");

                CUP$MPParser$result = new java_cup.runtime.Symbol(12/*Demand*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 32: // TaskName ::= TASKID ID 
            {
                Object RESULT = null;

                System.out.println("Prepoznato imenovanje posla");

                CUP$MPParser$result = new java_cup.runtime.Symbol(11/*TaskName*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 1)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 31: // TaskDef ::= TASK TaskName COMMA Demand COMMA Mapping TASKEND 
            {
                Object RESULT = null;

                System.out.println("Prepoznata definicija posla");

                CUP$MPParser$result = new java_cup.runtime.Symbol(10/*TaskDef*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 6)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 30: // TaskList ::= TaskDef 
            {
                Object RESULT = null;

                System.out.println("Prepoznata lista poslova");

                CUP$MPParser$result = new java_cup.runtime.Symbol(9/*TaskList*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 29: // TaskList ::= TaskList SEMICOLON TaskDef 
            {
                Object RESULT = null;

                System.out.println("Prepoznata lista poslova");

                CUP$MPParser$result = new java_cup.runtime.Symbol(9/*TaskList*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 2)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 28: // Capacity ::= Term 
            {
                Object RESULT = null;

                System.out.println("Prepoznato definisanje kapaciteta servera");

                CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Capacity*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 27: // ServerName ::= SERVERID ID 
            {
                Object RESULT = null;

                System.out.println("Prepoznato imenovanje servera");

                CUP$MPParser$result = new java_cup.runtime.Symbol(7/*ServerName*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 1)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 26: // ServerDef ::= SERVER ServerName COMMA Capacity SERVEREND 
            {
                Object RESULT = null;

                System.out.println("Prepoznata definicija servera");

                CUP$MPParser$result = new java_cup.runtime.Symbol(6/*ServerDef*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 4)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 25: // ServerList ::= ServerDef 
            {
                Object RESULT = null;

                System.out.println("Prepoznata lista servera");

                CUP$MPParser$result = new java_cup.runtime.Symbol(5/*ServerList*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 24: // ServerList ::= ServerList SEMICOLON ServerDef 
            {
                Object RESULT = null;

                System.out.println("Prepoznata lista servera");

                CUP$MPParser$result = new java_cup.runtime.Symbol(5/*ServerList*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 2)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 23: // Deployment ::= DEPLOYMENT TaskList ServerList DEPLOYMENTEND 
            {
                Object RESULT = null;

                System.out.println("Prepoznat deployment");

                CUP$MPParser$result = new java_cup.runtime.Symbol(4/*Deployment*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 3)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 22: // Assign ::= ID ASSIGN Expr 
            {
                Assignment RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 2)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 2)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 2)).value;
                int eleft = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right;
                Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).value;

                System.out.println("Prepoznata dodela");
                Variable var = parser.symbolTable.getVar(id);
                RESULT = new Assignment(var, e);

                CUP$MPParser$result = new java_cup.runtime.Symbol(18/*Assign*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 2)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 21: // RelOp ::= GREATER 
            {
                Integer RESULT = null;

                System.out.println("Prepoznat relacioni operator greater");
                RESULT = Integer.valueOf(1);

                CUP$MPParser$result = new java_cup.runtime.Symbol(24/*RelOp*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 20: // RelOp ::= EQUAL 
            {
                Integer RESULT = null;

                System.out.println("Prepoznat relacioni operator equal");
                RESULT = Integer.valueOf(0);

                CUP$MPParser$result = new java_cup.runtime.Symbol(24/*RelOp*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 19: // RelOp ::= LESS 
            {
                Integer RESULT = null;

                System.out.println("Prepoznat relacioni operator less");
                RESULT = Integer.valueOf(-1);

                CUP$MPParser$result = new java_cup.runtime.Symbol(24/*RelOp*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 18: // Term ::= CONST 
            {
                Expression RESULT = null;
                int cleft = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left;
                int cright = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right;
                Constant c = (Constant) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).value;

                System.out.println("Prepoznata konstanta");
                RESULT = new ConstantExpression(c);

                CUP$MPParser$result = new java_cup.runtime.Symbol(21/*Term*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 17: // Term ::= ID 
            {
                Expression RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).value;

                System.out.println("Prepoznat identifikator");
                Variable var = parser.symbolTable.getVar(id);
                RESULT = new VariableExpression(var);

                CUP$MPParser$result = new java_cup.runtime.Symbol(21/*Term*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 16: // RelExpr ::= Term 
            {
                ComparisonExpression RESULT = null;
                int e1left = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right;
                Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).value;

                System.out.println("Prepoznat izraz");
                RESULT = new ComparisonExpression(e1, null, -1);

                CUP$MPParser$result = new java_cup.runtime.Symbol(22/*RelExpr*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 15: // RelExpr ::= Term RelOp Term 
            {
                ComparisonExpression RESULT = null;
                int e1left = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 2)).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 2)).right;
                Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 2)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 1)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 1)).right;
                Integer op = (Integer) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 1)).value;
                int e2left = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left;
                int e2right = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right;
                Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).value;

                System.out.println("Prepoznat izraz");
                RESULT = new ComparisonExpression(e1, e2, op);

                CUP$MPParser$result = new java_cup.runtime.Symbol(22/*RelExpr*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 2)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 14: // WhileStmt ::= WHILE LEFTPAR RelExpr RIGHTPAR COLON LEFTCURVEDPAR Stmts RIGHTCURVEDPAR DEFAULT LEFTCURVEDPAR Stmt RIGHTCURVEDPAR 
            {
                WhileStatement RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 9)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 9)).right;
                ComparisonExpression e = (ComparisonExpression) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 9)).value;
                int s1left = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 5)).left;
                int s1right = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 5)).right;
                Block s1 = (Block) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 5)).value;
                int s2left = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 1)).left;
                int s2right = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 1)).right;
                Statement s2 = (Statement) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 1)).value;

                System.out.println("Prepoznata while petlja");
                RESULT = new WhileStatement(e, s1, s2);

                CUP$MPParser$result = new java_cup.runtime.Symbol(23/*WhileStmt*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 11)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 13: // Stmt ::= WhileStmt 
            {
                Statement RESULT = null;
                int whilesleft = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left;
                int whilesright = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right;
                WhileStatement whiles = (WhileStatement) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).value;

                System.out.println("Prepoznata naredba");
                RESULT = whiles;

                CUP$MPParser$result = new java_cup.runtime.Symbol(17/*Stmt*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 12: // Stmt ::= Assign 
            {
                Statement RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right;
                Assignment a = (Assignment) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).value;

                System.out.println("Prepoznata naredba");
                RESULT = a;

                CUP$MPParser$result = new java_cup.runtime.Symbol(17/*Stmt*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 11: // Stmts ::= Stmt 
            {
                Block RESULT = null;
                int stmtleft = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left;
                int stmtright = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right;
                Statement stmt = (Statement) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).value;

                System.out.println("Prepoznat niz naredbi");
                RESULT = new Block();
                RESULT.addStatement(stmt);

                CUP$MPParser$result = new java_cup.runtime.Symbol(16/*Stmts*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 10: // Stmts ::= Stmts SEMICOLON Stmt 
            {
                Block RESULT = null;
                int stmtsleft = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 2)).left;
                int stmtsright = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 2)).right;
                Block stmts = (Block) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 2)).value;
                int stmtleft = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left;
                int stmtright = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right;
                Statement stmt = (Statement) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).value;

                System.out.println("Prepoznat niz naredbi");
                RESULT = stmts;
                RESULT.addStatement(stmt);

                CUP$MPParser$result = new java_cup.runtime.Symbol(16/*Stmts*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 2)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 9: // TypeNonTerm ::= STRING 
            {
                Type RESULT = null;

                System.out.println("Prepoznat tip string");
                RESULT = parser.symbolTable.getType("string");

                CUP$MPParser$result = new java_cup.runtime.Symbol(19/*TypeNonTerm*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 8: // TypeNonTerm ::= DOUBLE 
            {
                Type RESULT = null;

                System.out.println("Prepoznat tip double");
                RESULT = parser.symbolTable.getType("double");

                CUP$MPParser$result = new java_cup.runtime.Symbol(19/*TypeNonTerm*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 7: // TypeNonTerm ::= INTEGER 
            {
                Type RESULT = null;

                System.out.println("Prepoznat tip int");
                RESULT = parser.symbolTable.getType("integer");

                CUP$MPParser$result = new java_cup.runtime.Symbol(19/*TypeNonTerm*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 6: // Variable ::= ID COLON TypeNonTerm SEMICOLON 
            {
                Object RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 3)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 3)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 3)).value;
                int tleft = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 1)).left;
                int tright = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 1)).right;
                Type t = (Type) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 1)).value;

                System.out.println("Prepoznata deklaracija promenljive");
                parser.symbolTable.addVar(id, t);

                CUP$MPParser$result = new java_cup.runtime.Symbol(3/*Variable*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 3)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 5: // VariableDeclaration ::= Variable 
            {
                Object RESULT = null;

                System.out.println("Prepoznate deklaracije promenljivih");

                CUP$MPParser$result = new java_cup.runtime.Symbol(2/*VariableDeclaration*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 4: // VariableDeclaration ::= VariableDeclaration SEMICOLON Variable 
            {
                Object RESULT = null;

                System.out.println("Prepoznate deklaracije promenljivih");

                CUP$MPParser$result = new java_cup.runtime.Symbol(2/*VariableDeclaration*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 2)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 3: // Declarations ::= VariableDeclaration 
            {
                Object RESULT = null;

                System.out.println("Prepoznata deklaracija");

                CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Declarations*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 2: // Body ::= Declarations Stmts Deployment 
            {
                Block RESULT = null;
                int sleft = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 1)).left;
                int sright = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 1)).right;
                Block s = (Block) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 1)).value;

                System.out.println("Prepoznato telo modela");
                RESULT = s;

                CUP$MPParser$result = new java_cup.runtime.Symbol(15/*Body*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 2)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 1: // $START ::= Model EOF 
            {
                Object RESULT = null;
                int start_valleft = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 1)).left;
                int start_valright = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 1)).right;
                Block start_val = (Block) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 1)).value;
                RESULT = start_val;
                CUP$MPParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 1)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            /* ACCEPT */
            CUP$MPParser$parser.done_parsing();
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 0: // Model ::= MODEL Body MODELEND 
            {
                Block RESULT = null;
                int bleft = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 1)).left;
                int bright = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 1)).right;
                Block b = (Block) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 1)).value;

                System.out.println("Prepoznata definicija modela");
                RESULT = b;

                CUP$MPParser$result = new java_cup.runtime.Symbol(14/*Model*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 2)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /* . . . . . .*/
            default:
                throw new Exception(
                        "Invalid action number found in internal parse table");

        }
    }
}

