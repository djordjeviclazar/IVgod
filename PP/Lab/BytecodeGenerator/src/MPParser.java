
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Jan 25 23:46:20 CET 2021
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import SymbolTable.*;
import AST.*;

/** CUP v0.10k generated parser.
  * @version Mon Jan 25 23:46:20 CET 2021
  */
public class MPParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MPParser() {super();}

  /** Constructor which sets the default scanner. */
  public MPParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\046\000\002\020\005\000\002\002\004\000\002\021" +
    "\005\000\002\003\003\000\002\004\005\000\002\004\003" +
    "\000\002\005\006\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\022\005\000\002\022\003\000\002" +
    "\023\003\000\002\023\003\000\002\031\016\000\002\030" +
    "\005\000\002\030\003\000\002\027\003\000\002\027\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\024\005\000\002\006\006\000\002\007\005\000\002" +
    "\007\003\000\002\010\007\000\002\011\004\000\002\012" +
    "\003\000\002\013\005\000\002\013\003\000\002\014\011" +
    "\000\002\015\004\000\002\016\003\000\002\017\004\000" +
    "\002\026\005\000\002\026\005\000\002\026\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\123\000\004\004\004\001\002\000\004\010\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\041\120\001\002\000\010\006\ufffe\010\ufffe\042" +
    "\116\001\002\000\010\006\ufffc\010\ufffc\042\ufffc\001\002" +
    "\000\006\006\020\010\015\001\002\000\004\005\014\001" +
    "\002\000\004\002\001\001\002\000\004\031\107\001\002" +
    "\000\010\015\ufff6\037\ufff6\042\ufff6\001\002\000\006\015" +
    "\050\042\034\001\002\000\004\034\023\001\002\000\010" +
    "\015\ufff5\037\ufff5\042\ufff5\001\002\000\010\015\ufff4\037" +
    "\ufff4\042\ufff4\001\002\000\006\010\024\011\025\001\002" +
    "\000\030\015\ufff0\020\ufff0\026\ufff0\027\ufff0\030\ufff0\032" +
    "\ufff0\033\ufff0\035\ufff0\037\ufff0\040\ufff0\042\ufff0\001\002" +
    "\000\030\015\uffef\020\uffef\026\uffef\027\uffef\030\uffef\032" +
    "\uffef\033\uffef\035\uffef\037\uffef\040\uffef\042\uffef\001\002" +
    "\000\012\026\046\027\045\030\044\035\ufff1\001\002\000" +
    "\004\035\030\001\002\000\004\041\031\001\002\000\004" +
    "\036\032\001\002\000\006\006\020\010\015\001\002\000" +
    "\006\037\035\042\034\001\002\000\006\006\020\010\015" +
    "\001\002\000\004\007\036\001\002\000\004\036\037\001" +
    "\002\000\006\006\020\010\015\001\002\000\004\037\041" +
    "\001\002\000\010\015\ufff3\037\ufff3\042\ufff3\001\002\000" +
    "\010\015\ufff7\037\ufff7\042\ufff7\001\002\000\006\010\024" +
    "\011\025\001\002\000\006\010\uffec\011\uffec\001\002\000" +
    "\006\010\uffed\011\uffed\001\002\000\006\010\uffee\011\uffee" +
    "\001\002\000\004\035\ufff2\001\002\000\004\022\053\001" +
    "\002\000\004\005\uffff\001\002\000\006\017\072\042\070" +
    "\001\002\000\004\024\056\001\002\000\006\017\uffe3\042" +
    "\uffe3\001\002\000\004\040\060\001\002\000\004\010\057" +
    "\001\002\000\004\040\uffe1\001\002\000\006\010\024\011" +
    "\025\001\002\000\004\040\uffe0\001\002\000\004\040\063" +
    "\001\002\000\004\025\065\001\002\000\004\023\067\001" +
    "\002\000\004\010\066\001\002\000\004\023\uffdf\001\002" +
    "\000\006\017\uffe2\042\uffe2\001\002\000\004\022\053\001" +
    "\002\000\006\016\uffe8\042\uffe8\001\002\000\004\021\100" +
    "\001\002\000\006\016\075\042\074\001\002\000\004\017" +
    "\072\001\002\000\004\005\uffea\001\002\000\006\016\uffe9" +
    "\042\uffe9\001\002\000\004\040\102\001\002\000\004\010" +
    "\101\001\002\000\004\040\uffe6\001\002\000\006\010\024" +
    "\011\025\001\002\000\004\020\uffe5\001\002\000\004\020" +
    "\105\001\002\000\006\016\uffe7\042\uffe7\001\002\000\006" +
    "\017\uffe4\042\uffe4\001\002\000\006\010\024\011\025\001" +
    "\002\000\014\015\uffdc\032\uffdc\033\uffdc\037\uffdc\042\uffdc" +
    "\001\002\000\014\015\uffeb\032\112\033\113\037\uffeb\042" +
    "\uffeb\001\002\000\006\010\024\011\025\001\002\000\006" +
    "\010\024\011\025\001\002\000\014\015\uffdd\032\uffdd\033" +
    "\uffdd\037\uffdd\042\uffdd\001\002\000\014\015\uffde\032\uffde" +
    "\033\uffde\037\uffde\042\uffde\001\002\000\004\010\007\001" +
    "\002\000\010\006\ufffd\010\ufffd\042\ufffd\001\002\000\010" +
    "\012\121\013\123\014\122\001\002\000\004\042\ufffa\001" +
    "\002\000\004\042\ufff8\001\002\000\004\042\ufff9\001\002" +
    "\000\004\042\125\001\002\000\010\006\ufffb\010\ufffb\042" +
    "\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\123\000\004\020\004\001\001\000\012\003\011\004" +
    "\007\005\010\021\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\022\016\023\015\024\020\031\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\027\025\030" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\022\032\023\015\024\020\031\021" +
    "\001\001\000\002\001\001\000\010\023\041\024\020\031" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\023\037\024\020\031\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\051\014\053\001\001\000\002" +
    "\001\001\000\006\007\072\010\070\001\001\000\004\015" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\061\027\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\105\001\001\000\002" +
    "\001\001\000\004\011\076\001\001\000\002\001\001\000" +
    "\004\010\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\103\027\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\026" +
    "\110\027\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\114\001\001\000\004\027\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\116\001\001" +
    "\000\002\001\001\000\004\025\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MPParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MPParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MPParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




   public int errNo = 0;

   public static void main( String[] args )
   {
      try
	  {
		   FileReader file = new FileReader( args[0] );
		   Scanner scanner = new MPLexer( file );
		   MPParser_without_errors parser = new MPParser_without_errors( scanner );
		   parser.parse();
//		   if ( parser.errNo == 0 )
//		      System.out.println( "Analiza zavrsena. U kodu nema gresaka." );
//		   else
//		      System.out.println( "Analiza zavrsena. Broj gresaka: " + parser.errNo );
	  }
	  catch( Exception e )
	  {
		   e.printStackTrace();
	  }
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MPParser$actions {
  private final MPParser parser;

  /** Constructor */
  CUP$MPParser$actions(MPParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MPParser$do_action(
    int                        CUP$MPParser$act_num,
    java_cup.runtime.lr_parser CUP$MPParser$parser,
    java.util.Stack            CUP$MPParser$stack,
    int                        CUP$MPParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MPParser$result;

      /* select the action based on the action number */
      switch (CUP$MPParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expr ::= Term 
            {
              Expression RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
            System.out.println("Prepoznat izraz");  
            RESULT = t;
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(20/*Expr*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Expr ::= Expr MUL Term 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
            System.out.println("Prepoznato množenje");
            RESULT = new Product(e, t);
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(20/*Expr*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Expr ::= Expr PLUS Term 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
            System.out.println("Prepoznato sabiranje");
            RESULT = new Sum(e, t);
            
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(20/*Expr*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Mapping ::= EXECUTEDON ID 
            {
              Object RESULT = null;
		
            System.out.println("Prepoznato mapiranje");
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*Mapping*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Demand ::= Term 
            {
              Object RESULT = null;
		
            System.out.println("Prepoznat zahtev");
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*Demand*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TaskName ::= TASKID ID 
            {
              Object RESULT = null;
		
            System.out.println("Prepoznato imenovanje posla");
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*TaskName*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TaskDef ::= TASK TaskName COMMA Demand COMMA Mapping TASKEND 
            {
              Object RESULT = null;
		
            System.out.println("Prepoznata definicija posla");
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*TaskDef*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TaskList ::= TaskDef 
            {
              Object RESULT = null;
		
            System.out.println("Prepoznata lista poslova");
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*TaskList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TaskList ::= TaskList SEMICOLON TaskDef 
            {
              Object RESULT = null;
		
            System.out.println("Prepoznata lista poslova");
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*TaskList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Capacity ::= Term 
            {
              Object RESULT = null;
		
            System.out.println("Prepoznato definisanje kapaciteta servera");
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Capacity*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ServerName ::= SERVERID ID 
            {
              Object RESULT = null;
		
            System.out.println("Prepoznato imenovanje servera");
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*ServerName*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ServerDef ::= SERVER ServerName COMMA Capacity SERVEREND 
            {
              Object RESULT = null;
		
            System.out.println("Prepoznata definicija servera");
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*ServerDef*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ServerList ::= ServerDef 
            {
              Object RESULT = null;
		
            System.out.println("Prepoznata lista servera");
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*ServerList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ServerList ::= ServerList SEMICOLON ServerDef 
            {
              Object RESULT = null;
		
            System.out.println("Prepoznata lista servera");
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*ServerList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Deployment ::= DEPLOYMENT TaskList ServerList DEPLOYMENTEND 
            {
              Object RESULT = null;
		
            System.out.println("Prepoznat deployment");
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*Deployment*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Assign ::= ID ASSIGN Expr 
            {
              Assignment RESULT = null;
		
            System.out.println("Prepoznata dodela");
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(18/*Assign*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // RelOp ::= GREATER 
            {
              Integer RESULT = null;
		
            System.out.println("Prepoznat relacioni operator greater");
            RESULT = Integer.valueOf(1);
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(24/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // RelOp ::= EQUAL 
            {
              Integer RESULT = null;
		
            System.out.println("Prepoznat relacioni operator equal");
            RESULT = Integer.valueOf(0);
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(24/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // RelOp ::= LESS 
            {
              Integer RESULT = null;
		
            System.out.println("Prepoznat relacioni operator less");
            RESULT = Integer.valueOf(-1);
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(24/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Term ::= CONST 
            {
              Expression RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
            System.out.println("Prepoznata konstanta");
            RESULT = new ConstantExpression(c);
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(21/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Term ::= ID 
            {
              Expression RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
            System.out.println("Prepoznat identifikator");
            Variable var = parser.symbolTable.getVar(ime);
            RESULT = new VariableExpression(var);
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(21/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // RelExpr ::= Term 
            {
              ComparisonExpression RESULT = null;
		
            System.out.println("Prepoznat izraz");
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(22/*RelExpr*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // RelExpr ::= Term RelOp Term 
            {
              ComparisonExpression RESULT = null;
		
            System.out.println("Prepoznat izraz");
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(22/*RelExpr*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // WhileStmt ::= WHILE LEFTPAR RelExpr RIGHTPAR COLON LEFTCURVEDPAR Stmts RIGHTCURVEDPAR DEFAULT LEFTCURVEDPAR Stmt RIGHTCURVEDPAR 
            {
              WhileStatement RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-9)).right;
		ComparisonExpression e = (ComparisonExpression)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-9)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-5)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-5)).right;
		Block s1 = (Block)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-5)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
            System.out.println("Prepoznata while petlja");
            RESULT = new WhileStatement( e, s1, s2 );
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(23/*WhileStmt*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-11)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Stmt ::= WhileStmt 
            {
              Statement RESULT = null;
		int whilesleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int whilesright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		WhileStatement whiles = (WhileStatement)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
            System.out.println("Prepoznata naredba");
            RESULT = whiles;
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(17/*Stmt*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Stmt ::= Assign 
            {
              Statement RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Assignment a = (Assignment)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
            System.out.println("Prepoznata naredba");
            RESULT = a;
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(17/*Stmt*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Stmts ::= Stmt 
            {
              Block RESULT = null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Statement stmt = (Statement)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
            System.out.println("Prepoznat niz naredbi");
            RESULT = new Block();
            RESULT.addStatement(stmt);
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(16/*Stmts*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Stmts ::= Stmts SEMICOLON Stmt 
            {
              Block RESULT = null;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Block stmts = (Block)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Statement stmt = (Statement)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
            System.out.println("Prepoznat niz naredbi");
            RESULT = stmts;
            RESULT.addStatement(stmt);
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(16/*Stmts*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TypeNonTerm ::= STRING 
            {
              Type RESULT = null;
		
            System.out.println("Prepoznat tip string");
            RESULT = parser.symbolTable.getType( "string" );
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(19/*TypeNonTerm*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TypeNonTerm ::= DOUBLE 
            {
              Type RESULT = null;
		
            System.out.println("Prepoznat tip double");
            RESULT = parser.symbolTable.getType( "double" );
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(19/*TypeNonTerm*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TypeNonTerm ::= INTEGER 
            {
              Type RESULT = null;
		
            System.out.println("Prepoznat tip int");
            RESULT = parser.symbolTable.getType( "integer" );
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(19/*TypeNonTerm*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Variable ::= ID COLON TypeNonTerm SEMICOLON 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
            System.out.println("Prepoznata deklaracija promenljive");
            String ime = (String) niz.get(id);
            parser.symbolTable.addVar( ime, t );
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(3/*Variable*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VariableDeclaration ::= Variable 
            {
              Object RESULT = null;
		
            System.out.println("Prepoznate deklaracije promenljivih");
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*VariableDeclaration*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // VariableDeclaration ::= VariableDeclaration SEMICOLON Variable 
            {
              Object RESULT = null;
		
            System.out.println("Prepoznate deklaracije promenljivih");
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*VariableDeclaration*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Declarations ::= VariableDeclaration 
            {
              Object RESULT = null;
		
            System.out.println("Prepoznata deklaracija");
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Declarations*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Body ::= Declarations Stmts Deployment 
            {
              Block RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Block s = (Block)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
            System.out.println("Prepoznato telo modela");
            RESULT = s;
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*Body*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Model EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Block start_val = (Block)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		RESULT = start_val;
              CUP$MPParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MPParser$parser.done_parsing();
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Model ::= MODEL Body MODELEND 
            {
              Block RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
        System.out.println("Prepoznata definicija modela"); 
        RESULT = b;
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*Model*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

