//import section

import java_cup.runtime.*;
import java.io.*;
import SymbolTable.*;
import AST.*;

parser code {:

   SymbolTable symbolTable;
:};

init with {:
	symbolTable = new SymbolTable();
:}

// terminals:
terminal MODEL, MODELEND, WHILE, DEFAULT, INTEGER, DOUBLE, STRING;
terminal String ID;
terminal DEPLOYMENT, DEPLOYMENTEND, SERVER, SERVEREND, SERVERID, TASK, TASKEND, TASKID, EXECUTEDON;
terminal LESS, EQUAL, GREATER, ASSIGN, PLUS, MUL;
terminal LEFTPAR, RIGHTPAR, LEFTCURVEDPAR, RIGHTCURVEDPAR, COMMA, COLON, SEMICOLON;

//const types
terminal String CONSTSTRING;
terminal Integer CONSTINTEGER;
terminal Double CONSTDOUBLE;

// nonterminals:
nonterminal Declarations, VariableDeclaration, Variable;
nonterminal Deployment;
nonterminal ServerList, ServerDef, ServerName, Capacity, TaskList, TaskDef, TaskName, Demand, Mapping;

nonterminal Block Model, Body, Stmts;
nonterminal Statement Stmt;
nonterminal Assignment Assign;
nonterminal Type TypeNonTerm;
nonterminal Expression Expr, Term;
nonterminal ComparisonExpression RelExpr;
nonterminal WhileStatement WhileStmt;
nonterminal Integer RelOp;
nonterminal Constant CONST;

precedence left PLUS;
precedence left MUL;

// grammar:
Model ::= MODEL Body:b MODELEND
    {:
        System.out.println("Prepoznata definicija modela"); 
        RESULT = b;
        :};

Body ::= Declarations Stmts:s Deployment
    {:
            System.out.println("Prepoznato telo modela");
            RESULT = s;
        :};

Declarations ::= VariableDeclaration
    {:
            System.out.println("Prepoznat blok deklaracija");
        :}; 

VariableDeclaration ::= VariableDeclaration SEMICOLON Variable 
    {:
            System.out.println("Prepoznate deklaracije promenljivih");
        :}
    | Variable
    {:
            System.out.println("Prepoznate deklaracije promenljivih");
        :}; 

Variable ::= ID:id COLON TypeNonTerm:t SEMICOLON
    {:
            System.out.println("Prepoznata deklaracija promenljive");
            parser.symbolTable.addVar(id, t );
        :}; 

TypeNonTerm ::= INTEGER
    {:
            System.out.println("Prepoznat tip int");
            RESULT = parser.symbolTable.getType( "integer" );
        :} 
    | DOUBLE
    {:
            System.out.println("Prepoznat tip double");
            RESULT = parser.symbolTable.getType( "double" );
        :} 
    | STRING
    {:
            System.out.println("Prepoznat tip string");
            RESULT = parser.symbolTable.getType( "string" );
        :}; 
    
Stmts ::= Stmts:stmts SEMICOLON Stmt:stmt
    {:
            System.out.println("Prepoznat niz naredbi");
            RESULT = stmts;
            RESULT.addStatement(stmt);
        :} 
    | Stmt:stmt
    {:
            System.out.println("Prepoznat niz naredbi");
            RESULT = new Block();
            RESULT.addStatement(stmt);
        :}; 
    
Stmt ::= Assign:a
    {:
            System.out.println("Prepoznata naredba");
            RESULT = a;
        :} 
    | WhileStmt:whiles
    {:
            System.out.println("Prepoznata naredba");
            RESULT = whiles;
        :}; 
    
WhileStmt ::= WHILE LEFTPAR RelExpr:e RIGHTPAR COLON LEFTCURVEDPAR Stmts:s1 RIGHTCURVEDPAR DEFAULT LEFTCURVEDPAR Stmt:s2 RIGHTCURVEDPAR
    {:
            System.out.println("Prepoznata while petlja");
            RESULT = new WhileStatement( e, s1, s2 );
        :};
 
RelExpr ::= Term:e1 RelOp:op Term:e2
    {:
            System.out.println("Prepoznat izraz");
            RESULT = new ComparisonExpression(e1, e2, op);
        :} 
    | Term:e1
    {:
            System.out.println("Prepoznat izraz");
            RESULT = new ComparisonExpression(e1, null, -1);
        :}; 
    
Term ::= ID:id
    {:
            System.out.println("Prepoznat identifikator");
            Variable var = parser.symbolTable.getVar(id);
            RESULT = new VariableExpression(var);
        :} 
    | CONST:c
    {:
            System.out.println("Prepoznata konstanta");
            RESULT = new ConstantExpression(c);
        :};
     
RelOp ::= LESS
    {:
            System.out.println("Prepoznat relacioni operator less");
            RESULT = Integer.valueOf(-1);
        :} 
    | EQUAL
    {:
            System.out.println("Prepoznat relacioni operator equal");
            RESULT = Integer.valueOf(0);
        :} 
    | GREATER
    {:
            System.out.println("Prepoznat relacioni operator greater");
            RESULT = Integer.valueOf(1);
        :};
     
Assign ::= ID:id ASSIGN Expr:e
    {:
            System.out.println("Prepoznata dodela");
            Variable var = parser.symbolTable.getVar(id);
            RESULT = new Assignment(var, e);
        :}; 

Deployment ::= DEPLOYMENT TaskList ServerList DEPLOYMENTEND
    {:
            System.out.println("Prepoznat deployment");
        :};
 
ServerList ::= ServerList SEMICOLON ServerDef
    {:
            System.out.println("Prepoznata lista servera");
        :} 
    | ServerDef
    {:
            System.out.println("Prepoznata lista servera");
        :};
     
ServerDef ::= SERVER ServerName COMMA Capacity SERVEREND
    {:
            System.out.println("Prepoznata definicija servera");
        :}; 

ServerName ::= SERVERID ID
    {:
            System.out.println("Prepoznato imenovanje servera");
        :}; 

Capacity ::= Term
    {:
            System.out.println("Prepoznato definisanje kapaciteta servera");
        :}; 

TaskList ::= TaskList SEMICOLON TaskDef
    {:
            System.out.println("Prepoznata lista poslova");
        :} 
    | TaskDef
    {:
            System.out.println("Prepoznata lista poslova");
        :};
     
TaskDef ::= TASK TaskName COMMA Demand COMMA Mapping TASKEND
    {:
            System.out.println("Prepoznata definicija posla");
        :};
 
TaskName ::= TASKID ID
    {:
            System.out.println("Prepoznato imenovanje posla");
        :};
 
Demand ::= Term
    {:
            System.out.println("Prepoznat zahtev");
        :};
 
Mapping ::= EXECUTEDON ID
    {:
            System.out.println("Prepoznato mapiranje");
        :};
 
Expr ::= Expr:e PLUS Term:t
    {:
            System.out.println("Prepoznato sabiranje");
            RESULT = new Sum(e, t);
            
        :} 
    | Expr:e MUL Term:t
    {:
            System.out.println("Prepoznato mno≈æenje");
            RESULT = new Product(e, t);
        :} 
    | Term:t
    {:
            System.out.println("Prepoznat izraz");  
            RESULT = t;
        :}; 

// Mod:
CONST ::= CONSTSTRING:c
    {:
            System.out.println("Prepoznata je String konstanta");
            RESULT = new Constant(parser.symbolTable.getType( "string" ),c);
            //RESULT = Type.STRING;
        :} 
    | CONSTINTEGER:c
    {:
            System.out.println("Prepoznata je Integer konstanta");
            RESULT = new Constant(parser.symbolTable.getType( "integer" ),c);
            //RESULT = Type.INTEGER;
        :} 
    | CONSTDOUBLE:c
    {:
            System.out.println("Prepoznata je Double konstanta");
            RESULT = new Constant(parser.symbolTable.getType( "double" ),c);
            //RESULT = Type.DOUBLE;
        :}; 
