
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Dec 31 01:32:12 CET 2020
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;

/** CUP v0.10k generated parser.
  * @version Thu Dec 31 01:32:12 CET 2020
  */
public class MPParser_without_errors extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MPParser_without_errors() {super();}

  /** Constructor which sets the default scanner. */
  public MPParser_without_errors(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\046\000\002\003\005\000\002\002\004\000\002\004" +
    "\005\000\002\005\003\000\002\006\005\000\002\006\003" +
    "\000\002\007\006\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\011\005\000\002\011\003\000\002" +
    "\012\003\000\002\012\003\000\002\013\012\000\002\014" +
    "\005\000\002\014\003\000\002\015\003\000\002\015\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\017\005\000\002\020\006\000\002\021\005\000\002" +
    "\021\003\000\002\022\007\000\002\023\004\000\002\024" +
    "\003\000\002\025\005\000\002\025\003\000\002\026\011" +
    "\000\002\027\004\000\002\030\003\000\002\031\004\000" +
    "\002\032\005\000\002\032\005\000\002\032\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\117\000\004\004\004\001\002\000\004\010\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\016\114\001\002\000\010\006\ufffe\007\112\010" +
    "\ufffe\001\002\000\010\006\ufffc\007\ufffc\010\ufffc\001\002" +
    "\000\006\006\020\010\015\001\002\000\004\005\014\001" +
    "\002\000\004\002\001\001\002\000\004\015\103\001\002" +
    "\000\010\007\ufff6\022\ufff6\040\ufff6\001\002\000\010\007" +
    "\ufff5\022\ufff5\040\ufff5\001\002\000\004\035\066\001\002" +
    "\000\010\007\ufff4\022\ufff4\040\ufff4\001\002\000\006\007" +
    "\023\022\024\001\002\000\006\006\020\010\015\001\002" +
    "\000\004\027\027\001\002\000\004\005\uffff\001\002\000" +
    "\006\007\046\024\050\001\002\000\004\031\032\001\002" +
    "\000\006\007\uffe3\024\uffe3\001\002\000\004\007\034\001" +
    "\002\000\004\010\033\001\002\000\004\007\uffe1\001\002" +
    "\000\006\010\035\011\036\001\002\000\026\007\ufff0\012" +
    "\ufff0\013\ufff0\014\ufff0\022\ufff0\025\ufff0\033\ufff0\034\ufff0" +
    "\036\ufff0\040\ufff0\001\002\000\026\007\uffef\012\uffef\013" +
    "\uffef\014\uffef\022\uffef\025\uffef\033\uffef\034\uffef\036\uffef" +
    "\040\uffef\001\002\000\004\007\uffe0\001\002\000\004\007" +
    "\041\001\002\000\004\032\043\001\002\000\004\030\045" +
    "\001\002\000\004\010\044\001\002\000\004\030\uffdf\001" +
    "\002\000\006\007\uffe2\024\uffe2\001\002\000\004\027\027" +
    "\001\002\000\006\007\uffe8\023\uffe8\001\002\000\004\026" +
    "\056\001\002\000\006\007\052\023\053\001\002\000\004" +
    "\024\050\001\002\000\004\005\uffea\001\002\000\006\007" +
    "\uffe9\023\uffe9\001\002\000\004\007\060\001\002\000\004" +
    "\010\057\001\002\000\004\007\uffe6\001\002\000\006\010" +
    "\035\011\036\001\002\000\004\025\uffe5\001\002\000\004" +
    "\025\063\001\002\000\006\007\uffe7\023\uffe7\001\002\000" +
    "\006\007\uffe4\024\uffe4\001\002\000\010\007\ufff7\022\ufff7" +
    "\040\ufff7\001\002\000\006\010\035\011\036\001\002\000" +
    "\004\036\076\001\002\000\012\012\074\013\073\014\072" +
    "\036\ufff1\001\002\000\006\010\035\011\036\001\002\000" +
    "\006\010\uffec\011\uffec\001\002\000\006\010\uffed\011\uffed" +
    "\001\002\000\006\010\uffee\011\uffee\001\002\000\004\036" +
    "\ufff2\001\002\000\004\016\077\001\002\000\004\037\100" +
    "\001\002\000\006\006\020\010\015\001\002\000\006\007" +
    "\023\040\102\001\002\000\010\007\ufff3\022\ufff3\040\ufff3" +
    "\001\002\000\006\010\035\011\036\001\002\000\014\007" +
    "\uffdc\022\uffdc\033\uffdc\034\uffdc\040\uffdc\001\002\000\014" +
    "\007\uffeb\022\uffeb\033\106\034\107\040\uffeb\001\002\000" +
    "\006\010\035\011\036\001\002\000\006\010\035\011\036" +
    "\001\002\000\014\007\uffdd\022\uffdd\033\uffdd\034\uffdd\040" +
    "\uffdd\001\002\000\014\007\uffde\022\uffde\033\uffde\034\uffde" +
    "\040\uffde\001\002\000\004\010\007\001\002\000\010\006" +
    "\ufffd\007\ufffd\010\ufffd\001\002\000\010\017\115\020\120" +
    "\021\116\001\002\000\004\007\ufffa\001\002\000\004\007" +
    "\ufff8\001\002\000\004\007\121\001\002\000\004\007\ufff9" +
    "\001\002\000\010\006\ufffb\007\ufffb\010\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\117\000\004\003\004\001\001\000\012\004\012\005" +
    "\011\006\007\007\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\011\021\012\015\013\020\017\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\024\001\001\000\010\012\064\013" +
    "\020\017\016\001\001\000\006\025\025\026\027\001\001" +
    "\000\002\001\001\000\006\021\050\022\046\001\001\000" +
    "\004\027\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\036\030" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\063\001\001\000\002\001\001\000" +
    "\004\023\054\001\001\000\002\001\001\000\004\022\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\060" +
    "\024\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\066\015\067\001\001\000\002\001\001\000\004\016" +
    "\070\001\001\000\004\015\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\011\100\012\015" +
    "\013\020\017\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\103\032\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\110\001\001\000\004\015" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\112\001\001\000\002\001\001\000\004\010\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MPParser_without_errors$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MPParser_without_errors$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MPParser_without_errors$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




   public int errNo = 0;

   public static void main( String[] args )
   {
      try
	  {
		   FileReader file = new FileReader( args[0] );
		   Scanner scanner = new MPLexer( file );
		   MPParser parser = new MPParser( scanner );
		   parser.parse();
		   if ( parser.errNo == 0 )
		      System.out.println( "Analiza zavrsena. U kodu nema gresaka." );
		   else
		      System.out.println( "Analiza zavrsena. Broj gresaka: " + parser.errNo );
	  }
	  catch( Exception e )
	  {
		   e.printStackTrace();
	  }
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MPParser_without_errors$actions {
  private final MPParser_without_errors parser;

  /** Constructor */
  CUP$MPParser_without_errors$actions(MPParser_without_errors parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MPParser_without_errors$do_action(
    int                        CUP$MPParser_without_errors$act_num,
    java_cup.runtime.lr_parser CUP$MPParser_without_errors$parser,
    java.util.Stack            CUP$MPParser_without_errors$stack,
    int                        CUP$MPParser_without_errors$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MPParser_without_errors$result;

      /* select the action based on the action number */
      switch (CUP$MPParser_without_errors$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expression ::= Term 
            {
              Object RESULT = null;
		
            System.out.println("Prepoznat izraz");
        
              CUP$MPParser_without_errors$result = new java_cup.runtime.Symbol(24/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).right, RESULT);
            }
          return CUP$MPParser_without_errors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Expression ::= Expression MUL Term 
            {
              Object RESULT = null;
		
            System.out.println("Prepoznato množenje");
        
              CUP$MPParser_without_errors$result = new java_cup.runtime.Symbol(24/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).right, RESULT);
            }
          return CUP$MPParser_without_errors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Expression ::= Expression PLUS Term 
            {
              Object RESULT = null;
		
            System.out.println("Prepoznato sabiranje");
        
              CUP$MPParser_without_errors$result = new java_cup.runtime.Symbol(24/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).right, RESULT);
            }
          return CUP$MPParser_without_errors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Mapping ::= EXECUTEDON ID 
            {
              Object RESULT = null;
		
            System.out.println("Prepoznato mapiranje");
        
              CUP$MPParser_without_errors$result = new java_cup.runtime.Symbol(23/*Mapping*/, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).right, RESULT);
            }
          return CUP$MPParser_without_errors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Demand ::= Term 
            {
              Object RESULT = null;
		
            System.out.println("Prepoznat zahtev");
        
              CUP$MPParser_without_errors$result = new java_cup.runtime.Symbol(22/*Demand*/, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).right, RESULT);
            }
          return CUP$MPParser_without_errors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TaskName ::= TASKID ID 
            {
              Object RESULT = null;
		
            System.out.println("Prepoznato imenovanje posla");
        
              CUP$MPParser_without_errors$result = new java_cup.runtime.Symbol(21/*TaskName*/, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).right, RESULT);
            }
          return CUP$MPParser_without_errors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TaskDef ::= TASK TaskName SEMICOLON Demand SEMICOLON Mapping TASKEND 
            {
              Object RESULT = null;
		
            System.out.println("Prepoznata definicija posla");
        
              CUP$MPParser_without_errors$result = new java_cup.runtime.Symbol(20/*TaskDef*/, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-6)).left, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).right, RESULT);
            }
          return CUP$MPParser_without_errors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TaskList ::= TaskDef 
            {
              Object RESULT = null;
		
            System.out.println("Prepoznata lista poslova");
        
              CUP$MPParser_without_errors$result = new java_cup.runtime.Symbol(19/*TaskList*/, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).right, RESULT);
            }
          return CUP$MPParser_without_errors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TaskList ::= TaskList SEMICOLON TaskDef 
            {
              Object RESULT = null;
		
            System.out.println("Prepoznata lista poslova");
        
              CUP$MPParser_without_errors$result = new java_cup.runtime.Symbol(19/*TaskList*/, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).right, RESULT);
            }
          return CUP$MPParser_without_errors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Capacity ::= Term 
            {
              Object RESULT = null;
		
            System.out.println("Prepoznato definisanje kapaciteta servera");
        
              CUP$MPParser_without_errors$result = new java_cup.runtime.Symbol(18/*Capacity*/, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).right, RESULT);
            }
          return CUP$MPParser_without_errors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ServerName ::= SERVERID ID 
            {
              Object RESULT = null;
		
            System.out.println("Prepoznato imenovanje servera");
        
              CUP$MPParser_without_errors$result = new java_cup.runtime.Symbol(17/*ServerName*/, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).right, RESULT);
            }
          return CUP$MPParser_without_errors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ServerDef ::= SERVER ServerName SEMICOLON Capacity SERVEREND 
            {
              Object RESULT = null;
		
            System.out.println("Prepoznata definicija servera");
        
              CUP$MPParser_without_errors$result = new java_cup.runtime.Symbol(16/*ServerDef*/, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-4)).left, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).right, RESULT);
            }
          return CUP$MPParser_without_errors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ServerList ::= ServerDef 
            {
              Object RESULT = null;
		
            System.out.println("Prepoznata lista servera");
        
              CUP$MPParser_without_errors$result = new java_cup.runtime.Symbol(15/*ServerList*/, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).right, RESULT);
            }
          return CUP$MPParser_without_errors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ServerList ::= ServerList SEMICOLON ServerDef 
            {
              Object RESULT = null;
		
            System.out.println("Prepoznata lista servera");
        
              CUP$MPParser_without_errors$result = new java_cup.runtime.Symbol(15/*ServerList*/, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).right, RESULT);
            }
          return CUP$MPParser_without_errors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Deployment ::= DEPLOYMENT TaskList ServerList DEPLOYMENTEND 
            {
              Object RESULT = null;
		
            System.out.println("Prepoznat deployment");
        
              CUP$MPParser_without_errors$result = new java_cup.runtime.Symbol(14/*Deployment*/, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).right, RESULT);
            }
          return CUP$MPParser_without_errors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Assignment ::= ID ASSIGN Expression 
            {
              Object RESULT = null;
		
            System.out.println("Prepoznata dodela");
        
              CUP$MPParser_without_errors$result = new java_cup.runtime.Symbol(13/*Assignment*/, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).right, RESULT);
            }
          return CUP$MPParser_without_errors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // RelOp ::= GREATER 
            {
              Object RESULT = null;
		
            System.out.println("Prepoznat relacioni operator greater");
        
              CUP$MPParser_without_errors$result = new java_cup.runtime.Symbol(12/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).right, RESULT);
            }
          return CUP$MPParser_without_errors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // RelOp ::= EQUAL 
            {
              Object RESULT = null;
		
            System.out.println("Prepoznat relacioni operator equal");
        
              CUP$MPParser_without_errors$result = new java_cup.runtime.Symbol(12/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).right, RESULT);
            }
          return CUP$MPParser_without_errors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // RelOp ::= LESS 
            {
              Object RESULT = null;
		
            System.out.println("Prepoznat relacioni operator less");
        
              CUP$MPParser_without_errors$result = new java_cup.runtime.Symbol(12/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).right, RESULT);
            }
          return CUP$MPParser_without_errors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Term ::= CONST 
            {
              Object RESULT = null;
		
            System.out.println("Prepoznata konstanta");
        
              CUP$MPParser_without_errors$result = new java_cup.runtime.Symbol(11/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).right, RESULT);
            }
          return CUP$MPParser_without_errors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Term ::= ID 
            {
              Object RESULT = null;
		
            System.out.println("Prepoznat identifikator");
        
              CUP$MPParser_without_errors$result = new java_cup.runtime.Symbol(11/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).right, RESULT);
            }
          return CUP$MPParser_without_errors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // RelExpression ::= Term 
            {
              Object RESULT = null;
		
            System.out.println("Prepoznat izraz");
        
              CUP$MPParser_without_errors$result = new java_cup.runtime.Symbol(10/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).right, RESULT);
            }
          return CUP$MPParser_without_errors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // RelExpression ::= Term RelOp Term 
            {
              Object RESULT = null;
		
            System.out.println("Prepoznat izraz");
        
              CUP$MPParser_without_errors$result = new java_cup.runtime.Symbol(10/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).right, RESULT);
            }
          return CUP$MPParser_without_errors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // WhileStatement ::= WHILE LEFTPAR RelExpression RIGHTPAR COLON LEFTCURVEDPAR Statements RIGHTCURVEDPAR 
            {
              Object RESULT = null;
		
            System.out.println("Prepoznata while petlja");
        
              CUP$MPParser_without_errors$result = new java_cup.runtime.Symbol(9/*WhileStatement*/, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-7)).left, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).right, RESULT);
            }
          return CUP$MPParser_without_errors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Statement ::= WhileStatement 
            {
              Object RESULT = null;
		
            System.out.println("Prepoznata naredba");
        
              CUP$MPParser_without_errors$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).right, RESULT);
            }
          return CUP$MPParser_without_errors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Statement ::= Assignment 
            {
              Object RESULT = null;
		
            System.out.println("Prepoznata naredba");
        
              CUP$MPParser_without_errors$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).right, RESULT);
            }
          return CUP$MPParser_without_errors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Statements ::= Statement 
            {
              Object RESULT = null;
		
            System.out.println("Prepoznat niz naredbi");
        
              CUP$MPParser_without_errors$result = new java_cup.runtime.Symbol(7/*Statements*/, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).right, RESULT);
            }
          return CUP$MPParser_without_errors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Statements ::= Statements SEMICOLON Statement 
            {
              Object RESULT = null;
		
            System.out.println("Prepoznat niz naredbi");
        
              CUP$MPParser_without_errors$result = new java_cup.runtime.Symbol(7/*Statements*/, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).right, RESULT);
            }
          return CUP$MPParser_without_errors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= STRING 
            {
              Object RESULT = null;
		
            System.out.println("Prepoznat tip string");
        
              CUP$MPParser_without_errors$result = new java_cup.runtime.Symbol(6/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).right, RESULT);
            }
          return CUP$MPParser_without_errors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= DOUBLE 
            {
              Object RESULT = null;
		
            System.out.println("Prepoznat tip double");
        
              CUP$MPParser_without_errors$result = new java_cup.runtime.Symbol(6/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).right, RESULT);
            }
          return CUP$MPParser_without_errors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Type ::= INTEGER 
            {
              Object RESULT = null;
		
            System.out.println("Prepoznat tip int");
        
              CUP$MPParser_without_errors$result = new java_cup.runtime.Symbol(6/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).right, RESULT);
            }
          return CUP$MPParser_without_errors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Variable ::= ID COLON Type SEMICOLON 
            {
              Object RESULT = null;
		
            System.out.println("Prepoznata deklaracija promenljive");
        
              CUP$MPParser_without_errors$result = new java_cup.runtime.Symbol(5/*Variable*/, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).right, RESULT);
            }
          return CUP$MPParser_without_errors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VariableDeclaration ::= Variable 
            {
              Object RESULT = null;
		
            System.out.println("Prepoznate deklaracije promenljivih");
        
              CUP$MPParser_without_errors$result = new java_cup.runtime.Symbol(4/*VariableDeclaration*/, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).right, RESULT);
            }
          return CUP$MPParser_without_errors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // VariableDeclaration ::= VariableDeclaration SEMICOLON Variable 
            {
              Object RESULT = null;
		
            System.out.println("Prepoznate deklaracije promenljivih");
        
              CUP$MPParser_without_errors$result = new java_cup.runtime.Symbol(4/*VariableDeclaration*/, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).right, RESULT);
            }
          return CUP$MPParser_without_errors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Declarations ::= VariableDeclaration 
            {
              Object RESULT = null;
		
            System.out.println("Prepoznata deklaracija");
        
              CUP$MPParser_without_errors$result = new java_cup.runtime.Symbol(3/*Declarations*/, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).right, RESULT);
            }
          return CUP$MPParser_without_errors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Body ::= Declarations Statements Deployment 
            {
              Object RESULT = null;
		
            System.out.println("Prepoznato telo modela");
        
              CUP$MPParser_without_errors$result = new java_cup.runtime.Symbol(2/*Body*/, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).right, RESULT);
            }
          return CUP$MPParser_without_errors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Model EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-1)).value;
		RESULT = start_val;
              CUP$MPParser_without_errors$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MPParser_without_errors$parser.done_parsing();
          return CUP$MPParser_without_errors$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Model ::= MODEL Body MODELEND 
            {
              Object RESULT = null;
		
        System.out.println("Prepoznata definicija modela"); 
        
              CUP$MPParser_without_errors$result = new java_cup.runtime.Symbol(1/*Model*/, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser_without_errors$stack.elementAt(CUP$MPParser_without_errors$top-0)).right, RESULT);
            }
          return CUP$MPParser_without_errors$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

