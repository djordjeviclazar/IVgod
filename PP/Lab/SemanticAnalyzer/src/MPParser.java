//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Jan 26 17:14:40 CET 2021
//----------------------------------------------------

import SymbolTable.SymbolTable;
import SymbolTable.Type;
import SymbolTable.Variable;
import java_cup.runtime.Scanner;

import java.io.FileReader;

/**
 * CUP v0.10k generated parser.
 *
 * @version Tue Jan 26 17:14:40 CET 2021
 */
public class MPParser extends java_cup.runtime.lr_parser
{

    /**
     * Default constructor.
     */
    public MPParser()
    {
        super();
    }

    /**
     * Constructor which sets the default scanner.
     */
    public MPParser(java_cup.runtime.Scanner s)
    {
        super(s);
    }

    /**
     * Production table.
     */
    protected static final short _production_table[][] =
            unpackFromStrings(new String[]{
                    "\000\051\000\002\003\005\000\002\002\004\000\002\004" +
                            "\005\000\002\005\003\000\002\006\005\000\002\006\003" +
                            "\000\002\007\006\000\002\010\003\000\002\010\003\000" +
                            "\002\010\003\000\002\016\005\000\002\016\003\000\002" +
                            "\017\003\000\002\017\003\000\002\020\012\000\002\012" +
                            "\005\000\002\012\003\000\002\013\003\000\002\013\003" +
                            "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
                            "\002\014\005\000\002\015\006\000\002\022\005\000\002" +
                            "\022\003\000\002\023\007\000\002\024\004\000\002\025" +
                            "\003\000\002\026\005\000\002\026\003\000\002\027\011" +
                            "\000\002\030\004\000\002\031\003\000\002\032\004\000" +
                            "\002\011\005\000\002\011\005\000\002\011\003\000\002" +
                            "\033\003\000\002\033\003\000\002\033\003"});

    /**
     * Access to production table.
     */
    public short[][] production_table()
    {
        return _production_table;
    }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table =
            unpackFromStrings(new String[]{
                    "\000\122\000\004\004\004\001\002\000\004\020\007\001" +
                            "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
                            "\000\004\014\117\001\002\000\010\006\ufffe\007\115\020" +
                            "\ufffe\001\002\000\010\006\ufffc\007\ufffc\020\ufffc\001\002" +
                            "\000\006\006\020\020\015\001\002\000\004\005\014\001" +
                            "\002\000\004\002\001\001\002\000\004\013\106\001\002" +
                            "\000\010\007\ufff6\024\ufff6\042\ufff6\001\002\000\010\007" +
                            "\ufff5\024\ufff5\042\ufff5\001\002\000\004\037\071\001\002" +
                            "\000\010\007\ufff4\024\ufff4\042\ufff4\001\002\000\006\007" +
                            "\023\024\024\001\002\000\006\006\020\020\015\001\002" +
                            "\000\004\031\027\001\002\000\004\005\uffff\001\002\000" +
                            "\006\007\051\026\053\001\002\000\004\033\032\001\002" +
                            "\000\006\007\uffe3\026\uffe3\001\002\000\004\043\034\001" +
                            "\002\000\004\020\033\001\002\000\004\043\uffe1\001\002" +
                            "\000\012\020\035\021\040\022\042\023\041\001\002\000" +
                            "\030\007\ufff0\010\ufff0\011\ufff0\012\ufff0\024\ufff0\027\ufff0" +
                            "\035\ufff0\036\ufff0\040\ufff0\042\ufff0\043\ufff0\001\002\000" +
                            "\030\007\uffef\010\uffef\011\uffef\012\uffef\024\uffef\027\uffef" +
                            "\035\uffef\036\uffef\040\uffef\042\uffef\043\uffef\001\002\000" +
                            "\004\043\uffe0\001\002\000\030\007\uffdb\010\uffdb\011\uffdb" +
                            "\012\uffdb\024\uffdb\027\uffdb\035\uffdb\036\uffdb\040\uffdb\042" +
                            "\uffdb\043\uffdb\001\002\000\030\007\uffd9\010\uffd9\011\uffd9" +
                            "\012\uffd9\024\uffd9\027\uffd9\035\uffd9\036\uffd9\040\uffd9\042" +
                            "\uffd9\043\uffd9\001\002\000\030\007\uffda\010\uffda\011\uffda" +
                            "\012\uffda\024\uffda\027\uffda\035\uffda\036\uffda\040\uffda\042" +
                            "\uffda\043\uffda\001\002\000\004\043\044\001\002\000\004" +
                            "\034\046\001\002\000\004\032\050\001\002\000\004\020" +
                            "\047\001\002\000\004\032\uffdf\001\002\000\006\007\uffe2" +
                            "\026\uffe2\001\002\000\004\031\027\001\002\000\006\007" +
                            "\uffe8\025\uffe8\001\002\000\004\030\061\001\002\000\006" +
                            "\007\055\025\056\001\002\000\004\026\053\001\002\000" +
                            "\004\005\uffea\001\002\000\006\007\uffe9\025\uffe9\001\002" +
                            "\000\004\043\063\001\002\000\004\020\062\001\002\000" +
                            "\004\043\uffe6\001\002\000\012\020\035\021\040\022\042" +
                            "\023\041\001\002\000\004\027\uffe5\001\002\000\004\027" +
                            "\066\001\002\000\006\007\uffe7\025\uffe7\001\002\000\006" +
                            "\007\uffe4\026\uffe4\001\002\000\010\007\ufff7\024\ufff7\042" +
                            "\ufff7\001\002\000\012\020\035\021\040\022\042\023\041" +
                            "\001\002\000\004\040\101\001\002\000\012\010\077\011" +
                            "\076\012\075\040\ufff1\001\002\000\012\020\035\021\040" +
                            "\022\042\023\041\001\002\000\012\020\uffec\021\uffec\022" +
                            "\uffec\023\uffec\001\002\000\012\020\uffed\021\uffed\022\uffed" +
                            "\023\uffed\001\002\000\012\020\uffee\021\uffee\022\uffee\023" +
                            "\uffee\001\002\000\004\040\ufff2\001\002\000\004\014\102" +
                            "\001\002\000\004\041\103\001\002\000\006\006\020\020" +
                            "\015\001\002\000\006\007\023\042\105\001\002\000\010" +
                            "\007\ufff3\024\ufff3\042\ufff3\001\002\000\012\020\035\021" +
                            "\040\022\042\023\041\001\002\000\014\007\uffdc\024\uffdc" +
                            "\035\uffdc\036\uffdc\042\uffdc\001\002\000\014\007\uffeb\024" +
                            "\uffeb\035\111\036\112\042\uffeb\001\002\000\012\020\035" +
                            "\021\040\022\042\023\041\001\002\000\012\020\035\021" +
                            "\040\022\042\023\041\001\002\000\014\007\uffdd\024\uffdd" +
                            "\035\uffdd\036\uffdd\042\uffdd\001\002\000\014\007\uffde\024" +
                            "\uffde\035\uffde\036\uffde\042\uffde\001\002\000\004\020\007" +
                            "\001\002\000\010\006\ufffd\007\ufffd\020\ufffd\001\002\000" +
                            "\010\015\120\016\123\017\121\001\002\000\004\007\ufffa" +
                            "\001\002\000\004\007\ufff8\001\002\000\004\007\124\001" +
                            "\002\000\004\007\ufff9\001\002\000\010\006\ufffb\007\ufffb" +
                            "\020\ufffb\001\002"});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table()
    {
        return _action_table;
    }

    /**
     * <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table =
            unpackFromStrings(new String[]{
                    "\000\122\000\004\003\004\001\001\000\012\004\012\005" +
                            "\011\006\007\007\010\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\012\014\016\016\021\017\015\020\020\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\004\015\024\001\001\000\010\014\016\017" +
                            "\067\020\020\001\001\000\006\026\025\027\027\001\001" +
                            "\000\002\001\001\000\006\022\053\023\051\001\001\000" +
                            "\004\030\030\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\010\013\036\031" +
                            "\042\033\035\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\004\032\044\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\004\027\066\001\001\000\002\001\001" +
                            "\000\004\024\057\001\001\000\002\001\001\000\004\023" +
                            "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
                            "\063\025\064\033\035\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\010\012\071\013\072\033\035\001\001\000\002" +
                            "\001\001\000\004\021\073\001\001\000\006\013\077\033" +
                            "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\012\014\016\016\103\017\015\020\020\001\001" +
                            "\000\002\001\001\000\002\001\001\000\010\011\107\013" +
                            "\106\033\035\001\001\000\002\001\001\000\002\001\001" +
                            "\000\006\013\113\033\035\001\001\000\006\013\112\033" +
                            "\035\001\001\000\002\001\001\000\002\001\001\000\004" +
                            "\007\115\001\001\000\002\001\001\000\004\010\121\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001"});

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table()
    {
        return _reduce_table;
    }

    /**
     * Instance of action encapsulation class.
     */
    protected CUP$MPParser$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions()
    {
        action_obj = new CUP$MPParser$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception
    {
        /* call code in generated class */
        return action_obj.CUP$MPParser$do_action(act_num, parser, stack, top);
    }

    /**
     * Indicates start state.
     */
    public int start_state()
    {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production()
    {
        return 1;
    }

    /**
     * <code>EOF</code> Symbol index.
     */
    public int EOF_sym()
    {
        return 0;
    }

    /**
     * <code>error</code> Symbol index.
     */
    public int error_sym()
    {
        return 1;
    }


    /**
     * User initialization code.
     */
    public void user_init() throws java.lang.Exception
    {
        symbolTable = new SymbolTable();
    }


    public int errNo = 0;

    SymbolTable symbolTable;

    public static void main(String[] args)
    {
        try
        {
            FileReader file = new FileReader(args[0]);
            Scanner scanner = new MPLexer(file);
            MPParser parser = new MPParser(scanner);
            parser.parse();
            if (parser.errNo == 0)
                System.out.println("Analiza zavrsena. U kodu nema gresaka.");
            else
                System.out.println("Analiza zavrsena. Broj gresaka: " + parser.errNo);
        } catch (Exception e)
        {
            e.printStackTrace();
        }
    }

    public int getLine()
    {
        return ((MPLexer) getScanner()).getLine();
    }

}

/**
 * Cup generated class to encapsulate user supplied action code.
 */
class CUP$MPParser$actions
{
    private final MPParser parser;

    /**
     * Constructor
     */
    CUP$MPParser$actions(MPParser parser)
    {
        this.parser = parser;
    }

    /**
     * Method with the actual generated action code.
     */
    public final java_cup.runtime.Symbol CUP$MPParser$do_action(
            int CUP$MPParser$act_num,
            java_cup.runtime.lr_parser CUP$MPParser$parser,
            java.util.Stack CUP$MPParser$stack,
            int CUP$MPParser$top)
            throws java.lang.Exception
    {
        /* Symbol object for return from actions */
        java_cup.runtime.Symbol CUP$MPParser$result;

        /* select the action based on the action number */
        switch (CUP$MPParser$act_num)
        {
            /*. . . . . . . . . . . . . . . . . . . .*/
            case 40: // CONST ::= CONSTDOUBLE 
            {
                Integer RESULT = null;
                int cleft = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left;
                int cright = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right;
                Double c = (Double) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).value;

                System.out.println("Prepoznata je Double konstanta");
                //RESULT = new Constant(parser.symbolTable.getType( "double" ),c);
                RESULT = Type.DOUBLE;

                CUP$MPParser$result = new java_cup.runtime.Symbol(25/*CONST*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 39: // CONST ::= CONSTINTEGER 
            {
                Integer RESULT = null;
                int cleft = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left;
                int cright = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right;
                Integer c = (Integer) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).value;

                System.out.println("Prepoznata je Integer konstanta");
                //RESULT = new Constant(parser.symbolTable.getType( "integer" ),c);
                RESULT = Type.INTEGER;

                CUP$MPParser$result = new java_cup.runtime.Symbol(25/*CONST*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 38: // CONST ::= CONSTSTRING 
            {
                Integer RESULT = null;
                int cleft = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left;
                int cright = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right;
                String c = (String) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).value;

                System.out.println("Prepoznata je String konstanta");
                //RESULT = new Constant(parser.symbolTable.getType( "string" ),c);
                RESULT = Type.STRING;

                CUP$MPParser$result = new java_cup.runtime.Symbol(25/*CONST*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 37: // Expression ::= Term 
            {
                Integer RESULT = null;
                int tleft = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left;
                int tright = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right;
                Integer t = (Integer) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).value;

                System.out.println("Prepoznat izraz");

                RESULT = t;

                CUP$MPParser$result = new java_cup.runtime.Symbol(7/*Expression*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 36: // Expression ::= Expression MUL Term 
            {
                Integer RESULT = null;
                int expleft = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 2)).left;
                int expright = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 2)).right;
                Integer exp = (Integer) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 2)).value;
                int tleft = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left;
                int tright = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right;
                Integer t = (Integer) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).value;

                System.out.println("Prepoznato množenje");

                if ((exp == Type.INTEGER || exp == Type.DOUBLE) && (t == Type.INTEGER || t == Type.DOUBLE))
                {
                    RESULT = exp > t ? exp : t;
                } else
                {
                    System.out.println("Aritmeti�?ki izraz mora da bude sastavljen od tipova DOUBLE ili INTEGER");
                    RESULT = exp > t ? exp : t;
                }

                CUP$MPParser$result = new java_cup.runtime.Symbol(7/*Expression*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 2)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 35: // Expression ::= Expression PLUS Term 
            {
                Integer RESULT = null;
                int expleft = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 2)).left;
                int expright = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 2)).right;
                Integer exp = (Integer) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 2)).value;
                int tleft = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left;
                int tright = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right;
                Integer t = (Integer) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).value;

                System.out.println("Prepoznato sabiranje");

                if ((exp == Type.INTEGER || exp == Type.DOUBLE) && (t == Type.INTEGER || t == Type.DOUBLE))
                {
                    RESULT = exp > t ? exp : t;
                } else
                {
                    System.out.println("Aritmeti�?ki izraz mora da bude sastavljen od tipova DOUBLE ili INTEGER");
                    RESULT = exp > t ? exp : t;
                }

                CUP$MPParser$result = new java_cup.runtime.Symbol(7/*Expression*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 2)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 34: // Mapping ::= EXECUTEDON ID 
            {
                Object RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).value;

                System.out.println("Prepoznato mapiranje");

                Variable variable = parser.symbolTable.getVar(id);
                if (variable != null)
                {
                    System.out.println("Prepoznat identifikator");

                    if (variable.last_def == -1)
                    {
                        parser.errNo++;
                        System.out.println("Promenljiva '" + id + "' je koriš�?ena pre inicijalizacije");
                    }

                    if (!variable.isServer)
                    {
                        parser.errNo++;
                        System.out.println("Promenljiva '" + id + "' mora odgovarati postoje�?em serveru");
                    }
                } else
                {
                    parser.errNo++;
                    System.out.println("Promenljiva '" + id + "' je koriš�?ena a nije definisana");
                }

                CUP$MPParser$result = new java_cup.runtime.Symbol(24/*Mapping*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 1)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 33: // Demand ::= Term 
            {
                Object RESULT = null;
                int tleft = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left;
                int tright = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right;
                Integer t = (Integer) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).value;

                System.out.println("Prepoznat zahtev");

                if (t != Type.INTEGER && t != Type.DOUBLE)
                {
                    parser.errNo++;
                    System.out.println("Zahtev posla mora biti numeri�?kog tipa (INTEGER, DOUBLE)");
                }

                CUP$MPParser$result = new java_cup.runtime.Symbol(23/*Demand*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 32: // TaskName ::= TASKID ID 
            {
                Object RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).value;

                System.out.println("Prepoznato imenovanje posla");

                Variable variable = parser.symbolTable.getVar(id);
                if (variable != null)
                {
                    System.out.println("Prepoznat identifikator");

                    if (variable.last_def == -1)
                    {
                        parser.errNo++;
                        System.out.println("Promenljiva '" + id + "' je koriš�?ena pre inicijalizacije");
                    }

                    if (variable.type.tkind != Type.STRING)
                    {
                        parser.errNo++;
                        System.out.println("Ime posla mora biti tipa STRING");
                    }
                } else
                {
                    parser.errNo++;
                    System.out.println("Promenljiva '" + id + "' je koriš�?ena a nije definisana");
                }

                CUP$MPParser$result = new java_cup.runtime.Symbol(22/*TaskName*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 1)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 31: // TaskDef ::= TASK TaskName COMMA Demand COMMA Mapping TASKEND 
            {
                Object RESULT = null;

                System.out.println("Prepoznata definicija posla");

                CUP$MPParser$result = new java_cup.runtime.Symbol(21/*TaskDef*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 6)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 30: // TaskList ::= TaskDef 
            {
                Object RESULT = null;

                System.out.println("Prepoznata lista poslova");

                CUP$MPParser$result = new java_cup.runtime.Symbol(20/*TaskList*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 29: // TaskList ::= TaskList SEMICOLON TaskDef 
            {
                Object RESULT = null;

                System.out.println("Prepoznata lista poslova");

                CUP$MPParser$result = new java_cup.runtime.Symbol(20/*TaskList*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 2)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 28: // Capacity ::= Term 
            {
                Object RESULT = null;
                int tleft = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left;
                int tright = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right;
                Integer t = (Integer) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).value;

                System.out.println("Prepoznato definisanje kapaciteta servera");

                if (t != Type.INTEGER && t != Type.DOUBLE)
                {
                    parser.errNo++;
                    System.out.println("Kapacitet servera mora biti numeri�?kog tipa (INTEGER, DOUBLE)");
                }

                CUP$MPParser$result = new java_cup.runtime.Symbol(19/*Capacity*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 27: // ServerName ::= SERVERID ID 
            {
                Object RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).value;

                System.out.println("Prepoznato imenovanje servera");

                Variable variable = parser.symbolTable.getVar(id);
                if (variable != null)
                {
                    System.out.println("Prepoznat identifikator");

                    if (variable.last_def == -1)
                    {
                        parser.errNo++;
                        System.out.println("Promenljiva '" + id + "' je koriš�?ena pre inicijalizacije");
                    }

                    if (variable.isServer)
                    {
                        parser.errNo++;
                        System.out.println("Ne može više servera da imaju istu ime");
                    }

                    if (variable.type.tkind != Type.STRING)
                    {
                        parser.errNo++;
                        System.out.println("Ime servera mora biti tipa STRING");
                    }

                    variable.isServer = true;
                } else
                {
                    parser.errNo++;
                    System.out.println("Promenljiva '" + id + "' je koriš�?ena a nije definisana");
                }


                CUP$MPParser$result = new java_cup.runtime.Symbol(18/*ServerName*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 1)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 26: // ServerDef ::= SERVER ServerName COMMA Capacity SERVEREND 
            {
                Object RESULT = null;

                System.out.println("Prepoznata definicija servera");

                CUP$MPParser$result = new java_cup.runtime.Symbol(17/*ServerDef*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 4)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 25: // ServerList ::= ServerDef 
            {
                Object RESULT = null;

                System.out.println("Prepoznata lista servera");

                CUP$MPParser$result = new java_cup.runtime.Symbol(16/*ServerList*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 24: // ServerList ::= ServerList SEMICOLON ServerDef 
            {
                Object RESULT = null;

                System.out.println("Prepoznata lista servera");

                CUP$MPParser$result = new java_cup.runtime.Symbol(16/*ServerList*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 2)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 23: // Deployment ::= DEPLOYMENT TaskList ServerList DEPLOYMENTEND 
            {
                Integer RESULT = null;

                System.out.println("Prepoznat deployment");

                CUP$MPParser$result = new java_cup.runtime.Symbol(11/*Deployment*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 3)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 22: // Assignment ::= ID ASSIGN Expression 
            {
                Integer RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 2)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 2)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 2)).value;
                int expleft = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left;
                int expright = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right;
                Integer exp = (Integer) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).value;

                System.out.println("Prepoznata dodela");

                Variable variable = parser.symbolTable.getVar(id);
                if (variable != null)
                {
                    variable.last_def = parser.getLine();
                    if (exp != Type.UNKNOWN && (variable.type.tkind == exp ||
                            (variable.type.tkind == Type.DOUBLE && exp == Type.INTEGER)))
                    {
                        RESULT = variable.type.tkind;
                    } else
                    {
                        System.out.println("Izraz u liniji " + parser.getLine() +
                                " nije kompatibilan sa tipom promenljive");
                        parser.errNo++;
                        RESULT = variable.type.tkind;
                    }
                } else
                {
                    System.out.println("Promenljiva '" + id + "' je koriš�?ena a nije definisana");
                    parser.errNo++;

                    RESULT = Type.UNKNOWN;
                }

                CUP$MPParser$result = new java_cup.runtime.Symbol(10/*Assignment*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 2)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 21: // RelOp ::= GREATER 
            {
                Object RESULT = null;

                System.out.println("Prepoznat relacioni operator greater");

                CUP$MPParser$result = new java_cup.runtime.Symbol(15/*RelOp*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 20: // RelOp ::= EQUAL 
            {
                Object RESULT = null;

                System.out.println("Prepoznat relacioni operator equal");

                CUP$MPParser$result = new java_cup.runtime.Symbol(15/*RelOp*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 19: // RelOp ::= LESS 
            {
                Object RESULT = null;

                System.out.println("Prepoznat relacioni operator less");

                CUP$MPParser$result = new java_cup.runtime.Symbol(15/*RelOp*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 18: // Term ::= CONST 
            {
                Integer RESULT = null;
                int cleft = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left;
                int cright = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right;
                Integer c = (Integer) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).value;

                System.out.println("Prepoznata konstanta");
                RESULT = c;

                CUP$MPParser$result = new java_cup.runtime.Symbol(9/*Term*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 17: // Term ::= ID 
            {
                Integer RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).value;

                Variable variable = parser.symbolTable.getVar(id);
                if (variable != null)
                {
                    System.out.println("Prepoznat identifikator");

                    if (variable.last_def == -1)
                    {
                        parser.errNo++;
                        System.out.println("Promenljiva '" + id + "' je koriš�?ena pre inicijalizacije");
                    }

                    RESULT = variable.type.tkind;
                } else
                {
                    parser.errNo++;
                    System.out.println("Promenljiva '" + id + "' je koriš�?ena a nije definisana");
                }


                CUP$MPParser$result = new java_cup.runtime.Symbol(9/*Term*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 16: // RelExpression ::= Term 
            {
                Integer RESULT = null;
                int tleft = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left;
                int tright = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right;
                Integer t = (Integer) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).value;

                System.out.println("Prepoznat izraz");

                RESULT = t;

                CUP$MPParser$result = new java_cup.runtime.Symbol(8/*RelExpression*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 15: // RelExpression ::= Term RelOp Term 
            {
                Integer RESULT = null;
                int t1left = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 2)).left;
                int t1right = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 2)).right;
                Integer t1 = (Integer) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 2)).value;
                int t2left = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left;
                int t2right = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right;
                Integer t2 = (Integer) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).value;

                System.out.println("Prepoznat izraz");

                int t = -1;
                if (t1 == Type.INTEGER || t2 == Type.INTEGER || t1 == Type.DOUBLE || t2 == Type.DOUBLE)
                {
                    t = 1;
                } else
                {
                    parser.errNo++;
                    System.out.println("Operator pore�?enja radi samo sa numeri�?kim tipovima (DOUBLE, INTEGER)");
                }

                RESULT = t;

                CUP$MPParser$result = new java_cup.runtime.Symbol(8/*RelExpression*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 2)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 14: // WhileStatement ::= WHILE LEFTPAR RelExpression RIGHTPAR COLON LEFTCURVEDPAR Statements RIGHTCURVEDPAR 
            {
                Object RESULT = null;
                int relexpleft = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 5)).left;
                int relexpright = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 5)).right;
                Integer relexp = (Integer) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 5)).value;

                System.out.println("Prepoznata while petlja");

                if (relexp != Type.INTEGER)
                {
                    parser.errNo++;
                    System.out.println("Uslov u while petlji mora biti tipa INTEGER");
                }

                CUP$MPParser$result = new java_cup.runtime.Symbol(14/*WhileStatement*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 7)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 13: // Statement ::= WhileStatement 
            {
                Object RESULT = null;

                System.out.println("Prepoznata naredba");

                CUP$MPParser$result = new java_cup.runtime.Symbol(13/*Statement*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 12: // Statement ::= Assignment 
            {
                Object RESULT = null;

                System.out.println("Prepoznata naredba");

                CUP$MPParser$result = new java_cup.runtime.Symbol(13/*Statement*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 11: // Statements ::= Statement 
            {
                Object RESULT = null;

                System.out.println("Prepoznat niz naredbi");

                CUP$MPParser$result = new java_cup.runtime.Symbol(12/*Statements*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 10: // Statements ::= Statements SEMICOLON Statement 
            {
                Object RESULT = null;

                System.out.println("Prepoznat niz naredbi");

                CUP$MPParser$result = new java_cup.runtime.Symbol(12/*Statements*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 2)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 9: // Type ::= STRING 
            {
                Type RESULT = null;
                int tleft = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left;
                int tright = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right;
                Object t = (Object) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).value;

                System.out.println("Prepoznat tip string");
                RESULT = parser.symbolTable.getType("string");


                CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Type*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 8: // Type ::= DOUBLE 
            {
                Type RESULT = null;
                int tleft = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left;
                int tright = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right;
                Object t = (Object) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).value;

                System.out.println("Prepoznat tip double");
                RESULT = parser.symbolTable.getType("double");

                CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Type*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 7: // Type ::= INTEGER 
            {
                Type RESULT = null;
                int tleft = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left;
                int tright = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right;
                Object t = (Object) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).value;

                System.out.println("Prepoznat tip int");
                RESULT = parser.symbolTable.getType("integer");

                CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Type*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 6: // Variable ::= ID COLON Type SEMICOLON 
            {
                String RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 3)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 3)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 3)).value;
                int typeleft = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 1)).left;
                int typeright = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 1)).right;
                Type type = (Type) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 1)).value;

                System.out.println("Prepoznata deklaracija promenljive");

                boolean e = !parser.symbolTable.addVar(id, type);
                if (e)
                {
                    parser.errNo++;
                    System.out.println("Promenljiva '" + id + "' je ve�? definisana");
                }

                CUP$MPParser$result = new java_cup.runtime.Symbol(5/*Variable*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 3)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 5: // VariableDeclaration ::= Variable 
            {
                Object RESULT = null;

                System.out.println("Prepoznate deklaracije promenljivih");

                CUP$MPParser$result = new java_cup.runtime.Symbol(4/*VariableDeclaration*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 4: // VariableDeclaration ::= VariableDeclaration SEMICOLON Variable 
            {
                Object RESULT = null;

                System.out.println("Prepoznate deklaracije promenljivih");

                CUP$MPParser$result = new java_cup.runtime.Symbol(4/*VariableDeclaration*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 2)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 3: // Declarations ::= VariableDeclaration 
            {
                Object RESULT = null;

                System.out.println("Prepoznata deklaracija");

                CUP$MPParser$result = new java_cup.runtime.Symbol(3/*Declarations*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 2: // Body ::= Declarations Statements Deployment 
            {
                Object RESULT = null;

                System.out.println("Prepoznato telo modela");

                CUP$MPParser$result = new java_cup.runtime.Symbol(2/*Body*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 2)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 1: // $START ::= Model EOF 
            {
                Object RESULT = null;
                int start_valleft = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 1)).left;
                int start_valright = ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 1)).right;
                Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 1)).value;
                RESULT = start_val;
                CUP$MPParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 1)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            /* ACCEPT */
            CUP$MPParser$parser.done_parsing();
            return CUP$MPParser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 0: // Model ::= MODEL Body MODELEND 
            {
                Object RESULT = null;

                System.out.println("Prepoznata definicija modela");

                CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Model*/, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 2)).left, ((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top - 0)).right, RESULT);
            }
            return CUP$MPParser$result;

            /* . . . . . .*/
            default:
                throw new Exception(
                        "Invalid action number found in internal parse table");

        }
    }
}

