//import section

import java_cup.runtime.*;
import java.io.*;
import SymbolTable.*;

parser code {:

   public int errNo = 0;

   SymbolTable symbolTable;

   public static void main( String[] args )
   {
      try
	  {
		   FileReader file = new FileReader( args[0] );
		   Scanner scanner = new MPLexer( file );
		   MPParser parser = new MPParser( scanner );
		   parser.parse();
		   if ( parser.errNo == 0 )
		      System.out.println( "Analiza zavrsena. U kodu nema gresaka." );
		   else
		      System.out.println( "Analiza zavrsena. Broj gresaka: " + parser.errNo );
	  }
	  catch( Exception e )
	  {
		   e.printStackTrace();
	  }
   }
   
   public int getLine()
   {
   	  return (( MPLexer) getScanner()).getLine();
   }
:};

init with{: symbolTable = new SymbolTable(); :}

// terminals:
terminal MODEL, MODELEND, WHILE, SEMICOLON, LESS, EQUAL, GREATER, ASSIGN, COLON, INTEGER, DOUBLE, STRING;
terminal String ID; // , CONST

//const types
terminal String CONSTSTRING;
terminal Integer CONSTINTEGER;
terminal Double CONSTDOUBLE;

terminal DEPLOYMENT, DEPLOYMENTEND, SERVER, SERVEREND, SERVERID, TASK, TASKEND, TASKID, EXECUTEDON, PLUS, MUL;
terminal LEFTPAR, RIGHTPAR, LEFTCURVEDPAR, RIGHTCURVEDPAR, COMMA;

// nonterminals:
nonterminal Model, Body, Declarations, VariableDeclaration;
nonterminal String Variable;
nonterminal Type Type;
nonterminal Integer Expression, RelExpression, Term, Assignment, Deployment;

nonterminal Statements, Statement, WhileStatement, RelOp;
nonterminal ServerList, ServerDef, ServerName, Capacity, TaskList, TaskDef, TaskName, Demand,Mapping;

// special:
nonterminal Integer CONST;

precedence left PLUS;
precedence left MUL;

// grammar:
Model ::= MODEL Body MODELEND
    {:
        System.out.println("Prepoznata definicija modela"); 
        :};

Body ::= Declarations Statements Deployment
    {:
            System.out.println("Prepoznato telo modela");
        :};

Declarations ::= VariableDeclaration
    {:
            System.out.println("Prepoznata deklaracija");
        :}; 

VariableDeclaration ::= VariableDeclaration SEMICOLON Variable 
    {:
            System.out.println("Prepoznate deklaracije promenljivih");
        :}
    | Variable
    {:
            System.out.println("Prepoznate deklaracije promenljivih");
        :}; 

Variable ::= ID:id COLON Type:type SEMICOLON
    {:
            System.out.println("Prepoznata deklaracija promenljive");
            
            boolean e = !parser.symbolTable.addVar(id, type);
            if (e)
            {
                parser.errNo++;
                System.out.println("Promenljiva '" + id + "' je već definisana");
            }
        :}; 
Type ::= INTEGER:t
    {:
            System.out.println("Prepoznat tip int");
            RESULT = parser.symbolTable.getType( "integer" );
        :} 
    | DOUBLE:t
    {:
            System.out.println("Prepoznat tip double");
            RESULT = parser.symbolTable.getType( "double" );
        :} 
    | STRING:t
    {:
            System.out.println("Prepoznat tip string");
            RESULT = parser.symbolTable.getType( "string" );
            
        :}; 
    
Statements ::= Statements SEMICOLON Statement
    {:
            System.out.println("Prepoznat niz naredbi");
        :} 
    | Statement
    {:
            System.out.println("Prepoznat niz naredbi");
        :}; 
    
Statement ::= Assignment
    {:
            System.out.println("Prepoznata naredba");
        :} 
    | WhileStatement
    {:
            System.out.println("Prepoznata naredba");
        :}; 
    
WhileStatement ::= WHILE LEFTPAR RelExpression:relexp RIGHTPAR COLON LEFTCURVEDPAR Statements RIGHTCURVEDPAR
    {:
            System.out.println("Prepoznata while petlja");
            
            if (relexp != Type.INTEGER)
            {
                parser.errNo++;
                System.out.println("Uslov u while petlji mora biti tipa INTEGER");
            }
        :};
 
RelExpression ::= Term:t1 RelOp Term:t2
    {:
            System.out.println("Prepoznat izraz");
            
            int t = -1;
            if (t1 == Type.INTEGER || t2 == Type.INTEGER || t1 == Type.DOUBLE || t2 == Type.DOUBLE)
            {
                t = 1;
            }
            else
            {
                parser.errNo++;
                System.out.println("Operator poređenja radi samo sa numeričkim tipovima (DOUBLE, INTEGER)");
            }
            
            RESULT = t;
        :} 
    | Term:t
    {:
            System.out.println("Prepoznat izraz");
            
            RESULT = t;
        :}; 
    
Term ::= ID:id
    {:
            Variable variable = parser.symbolTable.getVar(id);
            if (variable != null)
            {
                System.out.println("Prepoznat identifikator");
                
                if (variable.last_def == -1)
                {
                    parser.errNo++;
                    System.out.println("Promenljiva '" + id + "' je korišćena pre inicijalizacije");
                }
                
                RESULT = variable.type.tkind;
            }
            else
            {
                parser.errNo++;
                System.out.println("Promenljiva '" + id + "' je korišćena a nije definisana");
            }
            
            
        :} 
    | CONST:c
    {:
            System.out.println("Prepoznata konstanta");
            RESULT = c;
        :};
     
RelOp ::= LESS
    {:
            System.out.println("Prepoznat relacioni operator less");
        :} 
    | EQUAL
    {:
            System.out.println("Prepoznat relacioni operator equal");
        :} 
    | GREATER
    {:
            System.out.println("Prepoznat relacioni operator greater");
        :};
     
Assignment ::= ID:id ASSIGN Expression:exp
    {:
            System.out.println("Prepoznata dodela");
            
            Variable variable = parser.symbolTable.getVar(id);
            if (variable != null)
            {
                variable.last_def = parser.getLine();
                if (exp != Type.UNKNOWN && (variable.type.tkind == exp || 
                                            (variable.type.tkind == Type.DOUBLE && exp == Type.INTEGER)))
                {
                    RESULT = variable.type.tkind;
                }
                else
                {
                    System.out.println("Izraz u liniji " + parser.getLine() + 
                                       " nije kompatibilan sa tipom promenljive");
                    parser.errNo++;
                    RESULT = variable.type.tkind;
                }
            }
            else
            {
                System.out.println("Promenljiva '" + id + "' je korišćena a nije definisana");
                parser.errNo++;
                
                RESULT = Type.UNKNOWN;
            }
        :}; 

Deployment ::= DEPLOYMENT TaskList ServerList DEPLOYMENTEND
    {:
            System.out.println("Prepoznat deployment");
        :};
 
ServerList ::= ServerList SEMICOLON ServerDef
    {:
            System.out.println("Prepoznata lista servera");
        :} 
    | ServerDef
    {:
            System.out.println("Prepoznata lista servera");
        :};
     
ServerDef ::= SERVER ServerName COMMA Capacity SERVEREND
    {:
            System.out.println("Prepoznata definicija servera");
        :}; 

ServerName ::= SERVERID ID:id
    {:
            System.out.println("Prepoznato imenovanje servera");
            
            Variable variable = parser.symbolTable.getVar(id);
            if (variable != null)
            {
                System.out.println("Prepoznat identifikator");
                
                if (variable.last_def == -1)
                {
                    parser.errNo++;
                    System.out.println("Promenljiva '" + id + "' je korišćena pre inicijalizacije");
                }
                
                if (variable.isServer)
                {
                    parser.errNo++;
                    System.out.println("Ne može više servera da imaju istu ime");
                }
                
                if (variable.type.tkind != Type.STRING)
                {
                    parser.errNo++;
                    System.out.println("Ime servera mora biti tipa STRING");
                }
                
                variable.isServer = true;
            }
            else
            {
                parser.errNo++;
                System.out.println("Promenljiva '" + id + "' je korišćena a nije definisana");
            }
            
            
        :}; 

Capacity ::= Term:t
    {:
            System.out.println("Prepoznato definisanje kapaciteta servera");
            
            if (t != Type.INTEGER && t != Type.DOUBLE)
            {
                parser.errNo++;
                System.out.println("Kapacitet servera mora biti numeričkog tipa (INTEGER, DOUBLE)");
            }
        :}; 

TaskList ::= TaskList SEMICOLON TaskDef
    {:
            System.out.println("Prepoznata lista poslova");
        :} 
    | TaskDef
    {:
            System.out.println("Prepoznata lista poslova");
        :};
     
TaskDef ::= TASK TaskName COMMA Demand COMMA Mapping TASKEND
    {:
            System.out.println("Prepoznata definicija posla");
        :};
 
TaskName ::= TASKID ID:id
    {:
            System.out.println("Prepoznato imenovanje posla");
            
            Variable variable = parser.symbolTable.getVar(id);
            if (variable != null)
            {
                System.out.println("Prepoznat identifikator");
                
                if (variable.last_def == -1)
                {
                    parser.errNo++;
                    System.out.println("Promenljiva '" + id + "' je korišćena pre inicijalizacije");
                }
                
                if (variable.type.tkind != Type.STRING)
                {
                    parser.errNo++;
                    System.out.println("Ime posla mora biti tipa STRING");
                }
            }
            else
            {
                parser.errNo++;
                System.out.println("Promenljiva '" + id + "' je korišćena a nije definisana");
            }
        :};
 
Demand ::= Term:t
    {:
            System.out.println("Prepoznat zahtev");
            
            if (t != Type.INTEGER && t != Type.DOUBLE)
            {
                parser.errNo++;
                System.out.println("Zahtev posla mora biti numeričkog tipa (INTEGER, DOUBLE)");
            }
        :};
 
Mapping ::= EXECUTEDON ID:id
    {:
            System.out.println("Prepoznato mapiranje");
            
            Variable variable = parser.symbolTable.getVar(id);
            if (variable != null)
            {
                System.out.println("Prepoznat identifikator");
                
                if (variable.last_def == -1)
                {
                    parser.errNo++;
                    System.out.println("Promenljiva '" + id + "' je korišćena pre inicijalizacije");
                }
                
                if (!variable.isServer)
                {
                    parser.errNo++;
                    System.out.println("Promenljiva '" + id + "' mora odgovarati postojećem serveru");
                }
            }
            else
            {
                parser.errNo++;
                System.out.println("Promenljiva '" + id + "' je korišćena a nije definisana");
            }
        :};
 
Expression ::= Expression:exp PLUS Term:t
    {:
            System.out.println("Prepoznato sabiranje");
            
            if ((exp == Type.INTEGER || exp == Type.DOUBLE) && (t == Type.INTEGER || t == Type.DOUBLE))
            {
                RESULT = exp > t ? exp : t;
            }
            else
            {
                System.out.println("Aritmetički izraz mora da bude sastavljen od tipova DOUBLE ili INTEGER");
                RESULT = exp > t ? exp : t;
            }
        :} 
    | Expression:exp MUL Term:t
    {:
            System.out.println("Prepoznato množenje");
            
            if ((exp == Type.INTEGER || exp == Type.DOUBLE) && (t == Type.INTEGER || t == Type.DOUBLE))
            {
                RESULT = exp > t ? exp : t;
            }
            else
            {
                System.out.println("Aritmetički izraz mora da bude sastavljen od tipova DOUBLE ili INTEGER");
                RESULT = exp > t ? exp : t;
            }
        :} 
    | Term:t
    {:
            System.out.println("Prepoznat izraz");
            
            RESULT = t;
        :}; 
        
// Mod:
CONST ::= CONSTSTRING:c
    {:
            System.out.println("Prepoznata je String konstanta");
            //RESULT = new Constant(parser.symbolTable.getType( "string" ),c);
            RESULT = Type.STRING;
        :} 
    | CONSTINTEGER:c
    {:
            System.out.println("Prepoznata je Integer konstanta");
            //RESULT = new Constant(parser.symbolTable.getType( "integer" ),c);
            RESULT = Type.INTEGER;
        :} 
    | CONSTDOUBLE:c
    {:
            System.out.println("Prepoznata je Double konstanta");
            //RESULT = new Constant(parser.symbolTable.getType( "double" ),c);
            RESULT = Type.DOUBLE;
        :}; 
